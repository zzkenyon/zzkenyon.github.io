<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黑风雅过吟</title>
  
  <subtitle>不积跬步无以至千里</subtitle>
  <link href="/zzkenyon.github.io/atom.xml" rel="self"/>
  
  <link href="http://zzkenyon.github.io/"/>
  <updated>2019-05-23T02:57:29.493Z</updated>
  <id>http://zzkenyon.github.io/</id>
  
  <author>
    <name>Zhao Zhengkang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>源码分析-会用HashMap</title>
    <link href="http://zzkenyon.github.io/2018/07/21/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BC%9A%E7%94%A8HashMap/"/>
    <id>http://zzkenyon.github.io/2018/07/21/源码分析-会用HashMap/</id>
    <published>2018-07-21T12:41:36.000Z</published>
    <updated>2019-05-23T02:57:29.493Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一个问题引发的思考"><a href="#一个问题引发的思考" class="headerlink" title="一个问题引发的思考"></a>一个问题引发的思考</h3><p>如果确定只装载100个元素，new HashMap(?)多少是最佳的，why？<br>要弄解答这个问题，第一要知道HashMap的数据结构，第二再弄明白存取数据的逻辑。</p><h3 id="1-首先，我是一个数组"><a href="#1-首先，我是一个数组" class="headerlink" title="1.首先，我是一个数组"></a>1.首先，我是一个数组</h3><p>HashMap本质上是一个数组，数组的每个元素是一个单链表或者红黑树，由0个或多个节点组成。<br>java源码中的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transient Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><h4 id="1-1节点类Node-lt-K-V-gt"><a href="#1-1节点类Node-lt-K-V-gt" class="headerlink" title="1.1节点类Node&lt;K,V&gt;"></a>1.1节点类Node&lt;K,V&gt;</h4><p>Node类是HashMap的一个静态内部类，可以将其看成是一个独立的类，只是声明在HashMap类内部而已。下面是源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;//Entry是Map接口中的一个内部接口</span><br><span class="line">    final int hash;//此节点的哈希值，同一个链表上的哈希值不一定相同</span><br><span class="line">    final K key;//键，不能修改</span><br><span class="line">    V value;//值</span><br><span class="line">    Node&lt;K,V&gt; next;//指向下一个节点</span><br><span class="line"> </span><br><span class="line">    Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        this.hash = hash;</span><br><span class="line">        this.key = key;</span><br><span class="line">        this.value = value;</span><br><span class="line">        this.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public final K getKey()        &#123; return key; &#125;</span><br><span class="line">    public final V getValue()      &#123; return value; &#125;</span><br><span class="line">    public final String toString() &#123; return key + &quot;=&quot; + value; &#125;</span><br><span class="line"> </span><br><span class="line">    public final int hashCode() &#123;//此Node类的hashCode方法</span><br><span class="line">        return Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public final V setValue(V newValue) &#123;//重新设置节点Value，返回旧Value</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        return oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public final boolean equals(Object o) &#123;//判断节点相等的方法，</span><br><span class="line">        if (o == this)//同一个对象，返回true</span><br><span class="line">            return true;</span><br><span class="line">        if (o instanceof Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            if (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line">                return true;//键和值都相等则返回true</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2为啥有链表还有树"><a href="#1-2为啥有链表还有树" class="headerlink" title="1.2为啥有链表还有树"></a>1.2为啥有链表还有树</h4><p>为了提高查询效率，当链表的长度达到阈值的时候会自动将链表树形化，源码中的三个阈值常量如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static final int TREEIFY_THRESHOLD = 8;</span><br><span class="line">static final int UNTREEIFY_THRESHOLD = 6;</span><br><span class="line">static final int MIN_TREEIFY_CAPACITY = 64;</span><br></pre></td></tr></table></figure><ul><li>TREEIFY_THRESHOLD 树形化阈值：当链表长度超过这个值的时候，将链表进行树形化改造</li><li>UNTREEIFY_THRESHOLD 链表化阈值：当节点数低于这个阈值，将红黑树改造成链表。这个值必须必树形化阈值小，避免频繁的转换。</li><li>MIN_TREEIFY_CAPACITY 最小树形化容量：当数组table的长度低于这个值，即使元素链表的长度超过树形化阈值，也不会进行树形化改造，而是对table进行扩容。这个值不能小于4*TREEIFY_THRESHOLD  <h3 id="2-怎么进行数据的存取呢"><a href="#2-怎么进行数据的存取呢" class="headerlink" title="2.怎么进行数据的存取呢"></a>2.怎么进行数据的存取呢</h3><h4 id="2-1hash方法"><a href="#2-1hash方法" class="headerlink" title="2.1hash方法"></a>2.1hash方法</h4>拿到一个&lt;Key,Value&gt;，要存在table的哪个位置呢，这就需要用hash方法来决定了。。。<br>从代码说起：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>key.hashCode()函数调用的是key键值类型自带的哈希函数（与HashMap的hashCode()函数不是同一个），它返回一个32位int类型的散列值。</li><li>考虑到hash值得取值范围太大，不可能创建一个如此大的hash table，因此定位到table的位置只使用hash值的后几位（具体位数与table长度有关）。</li><li>如果只取后几位，碰撞会比较严重，因此就有了扰动函数，将hash值右移16位（高16位移到低16位），再与自身亦或，得到的结果混合了原hash值得高位和低位，以此来加大低位的随机性。</li></ul><h4 id="2-2定位"><a href="#2-2定位" class="headerlink" title="2.2定位"></a>2.2定位</h4><p>最终得到的hash值，将由低位进行定位，定位操作如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = tab.length</span><br><span class="line">tab[(n - 1) &amp; hash]</span><br></pre></td></tr></table></figure></p><ul><li>数组长度必为2的整数次幂，因此(n-1)相当于低位掩码，与h进行与操作，保留h低位，掩盖高位。</li><li>这里不做取余，是因为取余可能为负数（hashCode为负数的时候）</li><li>不对取余进行模运算，是因为最大的整数Math.abs()会返回负值</li><li>由此可知，对于HashMap的同一个链表的各个节点key值得hash值不一定相同（只是低位相同）</li></ul><h4 id="2-3扩容-resize"><a href="#2-3扩容-resize" class="headerlink" title="2.3扩容(resize)"></a>2.3扩容(resize)</h4><h5 id="默认容量是16"><a href="#默认容量是16" class="headerlink" title="默认容量是16"></a>默认容量是16</h5><p>16是2的整数次幂的原因，在小数据量的情况下16比15或20更能减少key之间的碰撞，而加快查询的效率。 </p><h5 id="容量是15会怎样？"><a href="#容量是15会怎样？" class="headerlink" title="容量是15会怎样？"></a>容量是15会怎样？</h5><p>当数组长度为15的时候，hashcode的值会与14（1110）进行“与”，那么最后一位永远是0，而0001，0011，0101，1001，1011，0111，1101这几个位置永远都不能存放元素了，空间浪费相当大，更糟的是这种情况中，数组可以使用的位置比数组长度小了很多，这意味着进一步增加了碰撞的几率（hash不均匀），降低了查询的效率！<br>所以，在存储大容量数据的时候，最好预先指定hashmap的size为2的整数次幂次方。就算不指定的话，也会以大于且最接近指定值大小的2次幂来初始化的，代码如下(HashMap的构造方法中)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int capacity = 1;  </span><br><span class="line">while (capacity &lt; initialCapacity)   </span><br><span class="line">    capacity &lt;&lt;= 1;  //乘以2</span><br></pre></td></tr></table></figure></p><h5 id="什么时候扩容-amp-怎么扩容"><a href="#什么时候扩容-amp-怎么扩容" class="headerlink" title="什么时候扩容&amp;怎么扩容"></a>什么时候扩容&amp;怎么扩容</h5><p>当hashmap中的元素越来越多的时候，碰撞的几率也就越来越高（因为数组的长度是固定的），所以为了提高查询的效率，就要对hashmap的数组进行扩容，数组扩容这个操作也会出现在ArrayList中，所以这是一个通用的操作，很多人对它的性能表示过怀疑，不过想想我们的“均摊”原理，就释然了，而在hashmap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize。<br>那么hashmap什么时候进行扩容呢？当hashmap中的元素个数超过数组大小length x loadFactor时，就会进行数组扩容，==<strong>loadFactor的默认值为0.75</strong>==，也就是说，默认情况下，数组大小为16，那么当hashmap中元素个数超过16x0.75=12的时候，就把数组的大小扩展为2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以++如果我们已经预知hashmap中元素的个数，那么预设元素的个数能够有效的提高hashmap的性能++。  </p><h5 id="回到开篇的问题"><a href="#回到开篇的问题" class="headerlink" title="回到开篇的问题"></a>回到开篇的问题</h5><p>当有100个元素new HashMap(100), 但是理论上来讲new HashMap(128)更合适，不过上面已经说过，即使是100，hashmap也自动会将其设置为128。 但是new HashMap(128)还不是更合适的，因为0.75x100 &lt; 100, 也就是说为了让0.75 x size &gt; 100, 我们必须这样new HashMap(256)才最合适，既考虑了&amp;的问题，也避免了resize的问题。 </p><h3 id="3-可以使用自定义的类作为key的类型吗"><a href="#3-可以使用自定义的类作为key的类型吗" class="headerlink" title="3.可以使用自定义的类作为key的类型吗"></a>3.可以使用自定义的类作为key的类型吗</h3><p>可以，但是必须改写key类型的hashcode与equals方法<br>首先计算key的hashcode，找到数组中对应位置的某一元素，然后通过key的equals方法在对应位置的链表中找到需要的元素。所以，hashcode与equals方法对于找到对应元素是两个关键方法。<br>Hashmap的key可以是任何类型的对象，例如User这种对象，为了保证两个具有相同属性的user的hashcode相同，我们就需要改写hashcode方法，比方把hashcode值的计算与User对象的id关联起来，那么只要user对象拥有相同id，那么他们的hashcode也能保持一致了，这样就可以找到在hashmap数组中的位置了。如果这个位置上有多个元素，还需要用key的equals方法在对应位置的链表中找到需要的元素，所以只改写了hashcode方法是不够的，equals方法也是需要改写滴~当然啦，按正常思维逻辑，equals方法一般都会根据实际的业务内容来定义，例如根据user对象的id来判断两个user是否相等。  </p><hr><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.iteye.com/topic/539465" target="_blank" rel="noopener">深入理解HashMap</a><br><a href="https://blog.csdn.net/u010292561/article/details/80472555" target="_blank" rel="noopener">HashMap详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一个问题引发的思考&quot;&gt;&lt;a href=&quot;#一个问题引发的思考&quot; class=&quot;headerlink&quot; title=&quot;一个问题引发的思考&quot;&gt;&lt;/a&gt;一个问题引发的思考&lt;/h3&gt;&lt;p&gt;如果确定只装载100个元素，new HashMap(?)多少是最佳的，why？&lt;br
      
    
    </summary>
    
    
      <category term="源码分析" scheme="http://zzkenyon.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>并发编程-线程池源码详解</title>
    <link href="http://zzkenyon.github.io/2018/05/15/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
    <id>http://zzkenyon.github.io/2018/05/15/并发编程-线程池源码详解/</id>
    <published>2018-05-15T03:28:21.000Z</published>
    <updated>2019-05-23T08:09:31.265Z</updated>
    
    <content type="html"><![CDATA[<p>阿里巴巴Java手册有一条：<br>【强制】线程资源必须通过线程池提供，禁止在应用程序中显示创建线程。<br>说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程导致消耗完内存或者过度切换的问题。</p><p>简单来说使用线程池有以下几个目的：  </p><ul><li>避免频繁的创建。线程是稀缺资源。</li><li>解耦。线程的创建与执行分开，方便维护。</li><li>线程资源复用。</li></ul><h3 id="1-线程池原理"><a href="#1-线程池原理" class="headerlink" title="1. 线程池原理"></a>1. 线程池原理</h3><p>本文从线程池的创建开始说起，跟着源码分析一下线程池的工作原理，本文源码基于JDK1.8</p><h4 id="1-1-Executors"><a href="#1-1-Executors" class="headerlink" title="1.1 Executors"></a>1.1 Executors</h4><p>Executors有一个私有的默认构造函数，不能实例化，是一个工具类，主要用于提供各种类型线程池创建的静态方法。<br>提供的静态创建方法有：</p><ul><li>newSingleThreadExecutor 创建一个执行器，该执行器使用一个工作线程操作一个无界队列。(但是请注意，如果这个线程在关闭之前的执行过程中由于失败而终止，那么如果需要执行后续任务，将会有一个新的线程代替它。与 newFixedThreadPool(1)不同，返回的executor不能被其他线程重新配置。</li><li>newFixedThreadPool  创建一个线程池，该线程池重用固定数量的线，如果任何线程在关闭之前的执行过程中由于失败而终止，那么如果需要执行后续任务，则会替换一个新线程。池中的线程将一直存在，直到显式关闭为止<br>操作一个共享的无界队列。</li><li>newWorkStealingPool  创建一个线程池，该线程池维护足够的线程以支持给定的并行度级别，并且可以使用多个队列来减少争用。并行度级别对应于积极参与或可用参与任务处理的线程的最大数量。线程的实际数量可以动态地增长和收缩。工作窃取池不能保证所提交任务的执行顺序。</li><li>newCachedThreadPool  创建一个线程池，该线程池根据需要创建新线程，但在可用时将重用以前构造的线程。这些池通常会提高执行许多短期异步任务的程序的性能。如果可用，对execute的调用将重用以前构造的线程。如果没有可用的现有线程，将创建一个新线程并将其添加到池中。未使用60秒的线程将被终止并从缓存中删除。因此，长时间空闲的池不会消耗任何资源。注意，可以使用ThreadPoolExecutor构造函数创建具有相似属性但不同细节(例如超时参数)的池。</li><li>newSingleThreadScheduledExecutor  创建一个单线程执行器，该执行器可以安排命令在给定的延迟之后运行，或者定期执行。(但是请注意，如果这个线程在关闭之前的执行过程中由于失败而终止，那么如果需要执行后续任务，将会有一个新的线程代替它。)，与 newFixedThreadPool(1)不同，返回的executor不能被其他线程重新配置。</li><li>newScheduledThreadPool  创建一个线程池，该线程池可以在给定延迟之后调度命令运行，或者定期执行命令。</li></ul><p>Executors 返回的线程池对象的弊端如下：</p><ol><li>FixedThreadPool 和 SingleThreadPool: 允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</li><li>CachedThreadPool 和 ScheduledThreadPool: 允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</li></ol><h4 id="1-2-ThreadPoolExecutor"><a href="#1-2-ThreadPoolExecutor" class="headerlink" title="1.2 ThreadPoolExecutor"></a>1.2 ThreadPoolExecutor</h4><p>首先看一下newFixedThreadPool创建方法的源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newFixedThreadPool(int nThreads) &#123;</span><br><span class="line">    return new ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  0L, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  new LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>事实上，大多数类型的线程池创建都是调用new ThreadPoolExecutor(…)创建一个ThreadPoolExecutor对象，只不过初始化参数不同而已。newWorkStealingPool创建时构造的是ForkJoinPool对象，本文不述。</p><p>下面是ThreadPoolExecutor的其中一个构造方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,</span><br><span class="line">                              int maximumPoolSize,</span><br><span class="line">                              long keepAliveTime,</span><br><span class="line">                              TimeUnit unit,</span><br><span class="line">                              BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                              ThreadFactory threadFactory,</span><br><span class="line">                              RejectedExecutionHandler handler) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>初始化参数的如下：</p><ul><li>corePoolSize 表示线程池的核心数,线程池保持alive状态的线程数，即使线程是空闲的。</li><li>maximumPoolSize 表示线程池支持的最大的线程个数。</li><li>keepAliveTime 表示池中线程空闲后的生存时间</li><li>unit 表示上一个时间参数的单位</li><li>workQueue 用于存放任务的阻塞队列</li><li>threadFactory 表示创建线程的工厂，一般使用默认的线程创建工厂Excutors.DefaultThreadFactor()</li><li>handler 当队列和最大线程池都满了之后的饱和策略，一般使用默认的handler—AbortPolicy（内部类）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">代码摘自：java.util.concurrent.ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line">private static final RejectedExecutionHandler defaultHandler = new AbortPolicy();</span><br><span class="line"></span><br><span class="line">public static class AbortPolicy implements RejectedExecutionHandler &#123;</span><br><span class="line">    public AbortPolicy() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</span><br><span class="line">        throw new RejectedExecutionException(&quot;Task &quot; + r.toString() +</span><br><span class="line">                                             &quot; rejected from &quot; +</span><br><span class="line">                                             e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">final void reject(Runnable command) &#123;</span><br><span class="line">    handler.rejectedExecution(command, this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户也可以自己实现RejectedExecutionHandler接口定义一个handler，当提交的任务因为各种原因被线程池拒绝，就会调用rejectedExecution方法。</p><h5 id="1-2-1-excute"><a href="#1-2-1-excute" class="headerlink" title="1.2.1 excute()"></a>1.2.1 excute()</h5><p>使用线程池时，通常我们用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threadPool.execute(new Job());</span><br></pre></td></tr></table></figure></p><p>这样的方式提交一个任务到线程池中，所以线程池ThreadPoolExecutor的核心逻辑就是execute()函数了，这个方法是在Excutor接口中声明。</p><p>在分析核心逻辑之前，先了解一下线程池重定义的状态，这些状态都和线程的执行密切相关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">代码摘自：java.util.concurrent.ThreadPoolExecutor</span><br><span class="line">private static final int COUNT_BITS = Integer.SIZE - 3;</span><br><span class="line"></span><br><span class="line">private static final int CAPCITY = (1 &lt;&lt; COUNT_BITS) - 1;</span><br><span class="line"></span><br><span class="line">private static final int RUNNING    = -1 &lt;&lt; COUNT_BITS;</span><br><span class="line">private static final int SHUTDOWN   =  0 &lt;&lt; COUNT_BITS;</span><br><span class="line">private static final int STOP       =  1 &lt;&lt; COUNT_BITS;</span><br><span class="line">private static final int TIDYING    =  2 &lt;&lt; COUNT_BITS;</span><br><span class="line">private static final int TERMINATED =  3 &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line">private static int runStateOf(int c)&#123;return c &amp; ~CAPCITY;&#125;</span><br><span class="line">private static int workerCountOf(int c)&#123;return c &amp; CAPCITY;&#125;</span><br><span class="line">private static int ctlOf(int rs, int wc)&#123;return rs | wc;&#125;</span><br></pre></td></tr></table></figure><p>分析上面的代码得到下表：<br>常量名| 二进制<br>—|—<br>CAPCITY | 0001 1111 1111 1111 1111 1111 1111 1111<br>RUNNING | 1110 0000 0000 0000 0000 0000 0000 0000<br>SHUTDOWN | 0000 0000 0000 0000 0000 0000 0000 0000<br>STOP | 0010 0000 0000 0000 0000 0000 0000 0000<br>TIDYING | 0100 0000 0000 0000 0000 0000 0000 0000<br>TERMINATED | 0110 0000 0000 0000 0000 0000 0000 0000</p><p>由上表可以看出，原子对象ctl的前三位表示状态，后29位记录池中worker的个数，CAPCITY就像是一个掩码，通过掩码可以快速的从ctl中获得当前线程池的运行状态和池中的worker个数。  </p><p>JDK1.8的并发包中不再通过设置阻塞队列的长度来限制任务的提交。阻塞队列的长度初始化之后就不能改变，因此如果担心阻塞队列太大导致内存占用太多，可以从两方面入手：1、初始化的时候选择合适的阻塞队列大小；2、调高corePoolSize或maxmumPoolSize加快任务的处理速度。参数的动态调整见下文。</p><p>线程池状态简述：</p><ul><li>RUNNING 是运行状态，指可以接受任务，执行队列里的任务。</li><li>SHUTDOWN 是指调用了shutdown()函数，不再接受新任务，但是会把队列里的任务执行完毕。</li><li>STOP 是指调用了shutdownNow()函数，不再接受新任务，同时终端正在执行的任务并丢弃队列中的待执行任务。</li><li>TIDYING 指所用任务都执行完毕。</li><li>TERMINATED 终止状态，在调用shutdown()/shutdownNow()中都会尝试更新这个状态。</li></ul><p>下面分析核心代码excute()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">代码摘自：java.util.concurrent.ThreadPoolExecutor</span><br><span class="line">public void execute(Runnable command) &#123;</span><br><span class="line">    if (command == null)</span><br><span class="line">        throw new NullPointerException();</span><br><span class="line">    //1、获取当前线程池的状态</span><br><span class="line">    int c = ctl.get();</span><br><span class="line">    //2、当线程数量小于corePoolSize，创建新线程运行</span><br><span class="line">    if (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        if (addWorker(command, true))</span><br><span class="line">            return;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    //3、如果线程池处于运行状态，并且写入阻塞队列成功</span><br><span class="line">    if (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        int recheck = ctl.get();</span><br><span class="line">        //4、双重检查，再次获取线程状态；如果线程池状态改变（非运行状态），需要从阻塞队列移除任务，并执行拒绝策略</span><br><span class="line">        if (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        //5、如果第二次检查通过，判断当前池是否为空，为空就创建新线程并执行</span><br><span class="line">        else if (workerCountOf(recheck) == 0)</span><br><span class="line">            addWorker(null, false);</span><br><span class="line">    &#125;</span><br><span class="line">    //6、如果第一次检查不通过（线程池不处于运行状态或者任务写入队列失败），尝试新建线程，如果失败则执行拒绝策略</span><br><span class="line">    else if (!addWorker(command, false))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下图表示了当有任务提交到线程池后线程池的处理流程：<br><img src="http://ws2.sinaimg.cn/large/87c9e458ly1g2zlek6nldj20pj0azmxo.jpg" alt="未命名文件">  </p><h5 id="1-2-2-addWorker"><a href="#1-2-2-addWorker" class="headerlink" title="1.2.2 addWorker()"></a>1.2.2 addWorker()</h5><p>addWorker函数是excute函数的核心逻辑—创建线程执行任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">代码摘自：java.util.concurrent.ThreadPoolExecutor</span><br><span class="line">private final ReentrantLock mainLock = new ReentrantLock();</span><br><span class="line"></span><br><span class="line">private boolean addWorker(Runnable firstTask, boolean core) &#123;</span><br><span class="line">    retry:</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        int c = ctl.get();</span><br><span class="line">        int rs = runStateOf(c);</span><br><span class="line">        //状态为 RUNNING 继续往下执行</span><br><span class="line">        //状态为不为RUNNING时，如果状态为SHUTDOWN并且firstTask为null并且阻塞队列空时，可继续向下运行</span><br><span class="line">        //否则返回false，添加worker失败</span><br><span class="line">        if (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">               firstTask == null &amp;&amp;</span><br><span class="line">               ! workQueue.isEmpty()))</span><br><span class="line">            return false;</span><br><span class="line">        </span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            int wc = workerCountOf(c);</span><br><span class="line">            //线程数大于CAPACITY </span><br><span class="line">            //线程数大于corePoolSize或maximumPoolSize（取决于core）</span><br><span class="line">            //否则添加worker失败</span><br><span class="line">            if (wc &gt;= CAPACITY ||</span><br><span class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                return false;</span><br><span class="line">            //线程数验证通过，使用CAS对c加1，执行成功则终止大循环继续向下运行</span><br><span class="line">            if (compareAndIncrementWorkerCount(c))</span><br><span class="line">                break retry;</span><br><span class="line">            //CAS设置失败则重新获取运行状态，若线程池状态发生改变，从头开始大循环，否则继续小循环</span><br><span class="line">            c = ctl.get(); </span><br><span class="line">            if (runStateOf(c) != rs)</span><br><span class="line">                continue retry;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean workerStarted = false;</span><br><span class="line">    boolean workerAdded = false;</span><br><span class="line">    Worker w = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        w = new Worker(firstTask);</span><br><span class="line">        final Thread t = w.thread;</span><br><span class="line">        if (t != null) &#123;</span><br><span class="line">            final ReentrantLock mainLock = this.mainLock;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            try &#123;</span><br><span class="line">                // 二重验证，获取池状态</span><br><span class="line">                int rs = runStateOf(ctl.get());</span><br><span class="line">                //状态为RUNNING 则通过继续执行</span><br><span class="line">                //状态为SHUTDOWN并且提交的任务为null 则通过继续执行</span><br><span class="line">                //否则直接执行finally解锁</span><br><span class="line">                if (rs &lt; SHUTDOWN ||</span><br><span class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == null)) &#123;</span><br><span class="line">                    if (t.isAlive()) // 如果worker中的线程t已经处于运行状态</span><br><span class="line">                        throw new IllegalThreadStateException();//抛异常</span><br><span class="line">                    workers.add(w);//将w加入HashSet</span><br><span class="line">                    int s = workers.size();</span><br><span class="line">                    //更新largestPoolSize，largestPoolSize只能在lock下修改</span><br><span class="line">                    if (s &gt; largestPoolSize)</span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                    workerAdded = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            if (workerAdded) &#123;</span><br><span class="line">                t.start();</span><br><span class="line">                workerStarted = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (! workerStarted)</span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    return workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="1-2-3-addWorkerFailed"><a href="#1-2-3-addWorkerFailed" class="headerlink" title="1.2.3 addWorkerFailed()"></a>1.2.3 addWorkerFailed()</h5><p>当任务执行失败，程序需要进行善后处理，即恢复任务执行过程中对内存的改动，移除set中的worker对象，修改池状态，最后尝试终止线程池。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">代码摘自：java.util.concurrent.ThreadPoolExecutor</span><br><span class="line">private void addWorkerFailed(Worker w) &#123;</span><br><span class="line">    final ReentrantLock mainLock = this.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        if (w != null)</span><br><span class="line">            workers.remove(w);</span><br><span class="line">        //CAS对ctl减1</span><br><span class="line">        decrementWorkerCount();</span><br><span class="line">        tryTerminate();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-配置线程池"><a href="#2-配置线程池" class="headerlink" title="2. 配置线程池"></a>2. 配置线程池</h3><p>流程介绍完了先来总结以下上文提到了几个核心参数在流程中的具体作用，然后介绍应该如何配置。</p><h4 id="2-1-参数详解"><a href="#2-1-参数详解" class="headerlink" title="2.1 参数详解"></a>2.1 参数详解</h4><ol><li>corePoolSize：核心线程数</li></ol><ul><li>核心线程会一直存活，即使没有任务需要执行</li><li>当线程数小于核心线程数时，即使有线程空闲，线程池也会有限创建新的线程</li><li>设置allowCoreThreadTimeout=true（默认是false）时，核心线程会超时关闭</li></ul><ol start="2"><li>maximumPoolSize：最大线程数</li></ol><ul><li>当线程数 &gt;= corePoolSize，且队列已满。线程池会创建新线程来处理  </li><li>当线程数 = maxmumPoolSize，且队列任务已满是，线程会拒绝处理任务  </li></ul><ol start="3"><li>keepAliveTime：线程空闲时间</li></ol><ul><li>当线程空闲时间达到keepAliveTime时，线程会退出，知道线程数量 = corePoolSize  </li><li>如果allowCoreThreadTimeout = true，则会知道线程数量 = 0</li></ul><ol start="4"><li>rejectedExecutionHandler：任务拒绝处理器<br>两种情况会拒绝处理任务： </li></ol><ul><li>当线程数已经达到maxmumPoolSize，且队列已满，会拒绝新任务</li><li>当线程池被调用shutdown()后，会等待线程池里的任务执行完毕，再shutdown。如果在调用shutdown()和线程池真正shutdown之间提交任务，会拒绝新任务</li></ul><p>线程池会调用rejectedExecutionHandler来处理这个任务。如果没有设置默认是AbortPolicy，会抛出异常，<br>ThreadPoolExecutor类有几个内部实现类来处理这类情况：  </p><blockquote><p>AbortPolicy 丢弃任务，抛运行时异常<br>CallerRunsPolicy 执行任务，调用Runnable的run强制执行。<br>DiscardPolicy 忽视，什么都不会发生<br>DiscardOldestPolicy 如果是应为第一种情况被拒绝，则从阻塞队列中踢出最先进入队列（最后一个执行）的任务，然后再次提交当前任务。</p></blockquote><p>实现RejectedExecutionHandler接口，可自定义处理器处理reject。</p><h4 id="2-2-参数配置"><a href="#2-2-参数配置" class="headerlink" title="2.2 参数配置"></a>2.2 参数配置</h4><p>默认值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">corePoolSize=1</span><br><span class="line">maxPoolSize=Integer.MAX_VALUE</span><br><span class="line">keepAliveTime=60s</span><br><span class="line">allowCoreThreadTimeout=false</span><br><span class="line">rejectedExecutionHandler=AbortPolicy()</span><br></pre></td></tr></table></figure></p><p>如何设置，需要根据几个值来决定：  </p><ul><li>tasks ：系统每秒任务数，假设为500~1000</li><li>taskcost：单任务耗时，假设为0.1s</li><li>responsetime：系统允许容忍的最大响应时间，假设为1s</li></ul><p>做几个计算：<br>corePoolSize = 系统每秒任务数/单线程每秒任务数 = 系统每秒任务数/（1/单任务耗时）<br>corePoolSize = tasks/(1/taskcost) =tasks<em>taskcout =  (500~1000)</em>0.1 = 50~100 。  corePoolSize设置应该大于50，根据8020原则，如果80%的系统每秒任务数小于800，那么corePoolSize设置为80即可  </p><p>maxPoolSize = （最大任务数-队列容量）/每个线程每秒处理能力 = 最大线程数<br>计算可得 maxPoolSize = (1000-80)/10 = 92<br>队列容量在初始化池的时候指定，一旦指定不能修改</p><p>rejectedExecutionHandler：根据具体情况来决定，任务不重要可丢弃，任务重要则要利用一些缓冲机制来处理</p><p>keepAliveTime和allowCoreThreadTimeout采用默认通常能满足<br>以上都是理想值，实际情况下要根据机器性能来决定。如果在未达到最大线程数的情况机器cpu load已经满了，则需要通过升级硬件和优化代码，降低taskcost来处理。</p><h4 id="2-3-参数动态调整"><a href="#2-3-参数动态调整" class="headerlink" title="2.3 参数动态调整"></a>2.3 参数动态调整</h4><p>用户可以通过corePoolSize和maxmumPoolSize的getter/setter进行访问和设置，具体怎么设置需要根据当前池中一些状态变量进行判断，如：</p><ul><li>getLargestPoolSize() 获取到目前为止达到过的最大线程数</li><li>getPoolSize() 获取当前线程数</li><li>getQueue().size() 获取当前阻塞队列任务数</li></ul><h3 id="3-关闭线程池"><a href="#3-关闭线程池" class="headerlink" title="3. 关闭线程池"></a>3. 关闭线程池</h3><p>关闭线程池无非就是两个方法 shutdown()/shutdownNow()。</p><p>但他们有着重要的区别：</p><ul><li>shutdown() 执行后停止接受新任务，会把队列的任务执行完毕。</li><li>shutdownNow() 也是停止接受新任务，但会中断所有的任务，将线程池状态变为 stop。</li></ul><p>两个方法都会中断线程，用户可自行判断是否需要响应中断。<br>shutdownNow() 要更简单粗暴，可以根据实际场景选择不同的方法。</p><p>通常是按照以下方式关闭线程池的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">long start = System.currentTimeMillis();</span><br><span class="line">for (int i = 0; i &lt;= 5; i++) &#123;</span><br><span class="line">    pool.execute(new Job());</span><br><span class="line">&#125;</span><br><span class="line">pool.shutdown();</span><br><span class="line">while (!pool.awaitTermination(1, TimeUnit.SECONDS)) &#123;</span><br><span class="line">    LOGGER.info(&quot;线程还在执行。。。&quot;);</span><br><span class="line">&#125;</span><br><span class="line">long end = System.currentTimeMillis();</span><br><span class="line">LOGGER.info(&quot;一共处理了【&#123;&#125;】&quot;, (end - start));</span><br></pre></td></tr></table></figure></p><p>pool.awaitTermination(1, TimeUnit.SECONDS) 会每隔一秒钟检查一次是否执行完毕（状态为 TERMINATED），当从 while 循环退出时就表明线程池已经完全终止了。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;阿里巴巴Java手册有一条：&lt;br&gt;【强制】线程资源必须通过线程池提供，禁止在应用程序中显示创建线程。&lt;br&gt;说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程导致消耗完内存或者过
      
    
    </summary>
    
    
      <category term="并发编程" scheme="http://zzkenyon.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>并发编程-ThreadLocal原理</title>
    <link href="http://zzkenyon.github.io/2018/05/03/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-ThreadLocal%E5%8E%9F%E7%90%86/"/>
    <id>http://zzkenyon.github.io/2018/05/03/并发编程-ThreadLocal原理/</id>
    <published>2018-05-03T12:58:11.000Z</published>
    <updated>2019-05-17T04:53:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>ThreadLocal是一个本地线程副本变量工具类，ThreadLocal的实例代表了一个线程局部的变量，主要用于将私有线程和该线程存放的副本对象做一个映射，各个线程之间的变量互不干扰，在高并发场景下，可以实现无状态的调用，特别适用于各个线程依赖不通的变量值完成操作的场景。</p><h3 id="1-我是什么"><a href="#1-我是什么" class="headerlink" title="1. 我是什么"></a>1. 我是什么</h3><ul><li>是让线程拥有独占的变量</li><li>它通过set、get方法进行设值和取值操作</li><li>它可以覆盖initialValue方法设置初始值，在没进行set之前调用get会调用初始化方法，一个线程只会调用一次</li><li>每个线程都会有一个指向threadLocal的弱引用，只要线程一直存活或者该threadLocal实例能被访问到，就不会被GC清理掉。当jvm内存溢出时，会清理掉值为Null的弱引用。</li></ul><h3 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2. 使用方法"></a>2. 使用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">    ThreadLocal&lt;String&gt; stringThreadLocal = new ThreadLocal&lt;String&gt;()&#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected String initialValue()&#123;</span><br><span class="line">            return &quot;default string&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    for(int i = 0; i&lt; 10; i++)&#123;</span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            stringThreadLocal.set(Thread.currentThread().getName());</span><br><span class="line">            System.out.println(stringThreadLocal.get());</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-我在一个map里"><a href="#3-我在一个map里" class="headerlink" title="3. 我在一个map里"></a>3. 我在一个map里</h3><p>每个线程都有一个ThreadLocalMap对象，map中存放了(ThreadLocal<t>,t)键值对<br><img src="http://ws1.sinaimg.cn/mw690/87c9e458gy1g2dhy5bvohj20me0n9q49.jpg" alt="timg">  </t></p><h4 id="3-1-get源码"><a href="#3-1-get源码" class="headerlink" title="3.1 get源码"></a>3.1 get源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public T get() &#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    if (map != null) &#123;</span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(this);</span><br><span class="line">        if (e != null) &#123;</span><br><span class="line">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取当前线程内部的ThreadLocalMap</li><li>map存在则获取当前ThreadLocal对应的值</li><li>不存在则调用setInitialValue进行初始化</li></ul><h4 id="3-2-setInitialValue-源码"><a href="#3-2-setInitialValue-源码" class="headerlink" title="3.2 setInitialValue()源码"></a>3.2 setInitialValue()源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private T setInitialValue() &#123;</span><br><span class="line">    T value = initialValue();</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    if (map != null)</span><br><span class="line">        map.set(this, value);</span><br><span class="line">    else</span><br><span class="line">        createMap(t, value);</span><br><span class="line">    return value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用重载的initialValue方法获取初始值</li><li>获取当前线程的ThreadLocalMap</li><li>map存在则将初始值put进去</li><li>map不存在则使用初始值为当前线程创建ThreadLocalMap</li></ul><h4 id="3-3-set-T-value-源码"><a href="#3-3-set-T-value-源码" class="headerlink" title="3.3 set(T value)源码"></a>3.3 set(T value)源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void set(T value) &#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    if (map != null)</span><br><span class="line">        map.set(this, value);</span><br><span class="line">    else</span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取当前线程内部的ThreadLocalMap</li><li>map存在则把当前ThreadLocal和value添加到map中</li><li>map不存在则创建一个ThreadLocalMap，保存到当前线程内部</li></ul><p><strong>小结</strong><br>每个线程都有一个ThreadLocalMap类型的私有变量，当为线程添加ThreadLocal对象时，就是保存到了这个map中，所以线程之间不会相互干扰。</p><h3 id="4-我还有一个大坑"><a href="#4-我还有一个大坑" class="headerlink" title="4. 我还有一个大坑"></a>4. 我还有一个大坑</h3><p>ThreadLocal使用不当，会引发内存泄露的问题<br>ThreadLocal对象存在thread对象中，只要线程没有死亡，该对象就不会被回收</p><p>remove()源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void remove() &#123;</span><br><span class="line">     ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">     if (m != null)</span><br><span class="line">         m.remove(this);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><ul><li>获取当前线程内部的ThreadLocalMap，存在则从map中删除这个ThreadLocal对象。</li></ul><h3 id="5-无处不在的map"><a href="#5-无处不在的map" class="headerlink" title="5. 无处不在的map"></a>5. 无处不在的map</h3><p>分析完4个公开方法的源码，发现每个方法都离不开ThreadLocalMap类，下面分析一下这个无处不在的map。</p><ul><li>ThreadLocalMap是一个自定义的Hashmap，专门用来保存线程的ThreadLocal变量</li><li>它的操作仅限于ThreadLocal类中，不对外暴露</li><li>这个类被用在Thread类的私有变量threadLocals和inheritableThreadLocals上</li><li>为了能够保存大量且存活时间较长的threadLocal实例，hash table entries采用了WeakReferences作为key的类型</li><li>一旦hash table运行空间不足，key为null的entry就会被清理掉</li></ul><p><strong>源码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">static class ThreadLocalMap &#123;</span><br><span class="line">    static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line">        Object value;</span><br><span class="line">        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">            super(k);</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static final int INITIAL_CAPACITY = 16;</span><br><span class="line"></span><br><span class="line">    private Entry[] table;</span><br><span class="line"></span><br><span class="line">    private int size = 0;</span><br><span class="line"></span><br><span class="line">    private int threshold; // Default to 0</span><br><span class="line"></span><br><span class="line">    private void setThreshold(int len) &#123;</span><br><span class="line">        threshold = len * 2 / 3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">        table = new Entry[INITIAL_CAPACITY];</span><br><span class="line">        int i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - 1);</span><br><span class="line">        table[i] = new Entry(firstKey, firstValue);</span><br><span class="line">        size = 1;</span><br><span class="line">        setThreshold(INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ThreadLocal是一个本地线程副本变量工具类，ThreadLocal的实例代表了一个线程局部的变量，主要用于将私有线程和该线程存放的副本对象做一个映射，各个线程之间的变量互不干扰，在高并发场景下，可以实现无状态的调用，特别适用于各个线程依赖不通的变量值完成操作的场景。
      
    
    </summary>
    
    
      <category term="并发编程" scheme="http://zzkenyon.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>并发编程-并发工具类</title>
    <link href="http://zzkenyon.github.io/2018/04/27/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://zzkenyon.github.io/2018/04/27/并发编程-并发工具类/</id>
    <published>2018-04-27T12:36:12.000Z</published>
    <updated>2019-05-21T06:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>在JDK的并发包中提供了几个非常有用的并发工具类。CountDownLatch、CyclicBarrier和Semaphore提供了并发流程控制手段，Exchanger提供了两个线程之间交换数据的手段，本文将配合应用场景介绍该如何使用这几个工具类。</p><h3 id="1-CountDownLatch"><a href="#1-CountDownLatch" class="headerlink" title="1. CountDownLatch"></a>1. CountDownLatch</h3><p>CountDownLatch是JDK 5+里面闭锁的一个实现，他允许一个或多个线程等待其他线程完成各自的工作后再执行。</p><p>闭锁（Latch）：一种同步方法，可以延迟线程的进度直到线程到达某个终点状态。</p><p>与CountDownLatch第一次交互是主线程等待其它的线程，主线程必须在启动其它线程后立即调用await方法，这样主线程的操作就会在这个方法上阻塞，直到其他线程完成各自的任务。</p><p>其他的N个线程必须引用闭锁对象，因为他们需要通知CountDownLatch对象，他们已经完成了各自的任务，这种机制就是通过调用countDown()方法来完成的。每调用一次这个方法，在构造函数中初始化的count值就减1，所以当N个线程都调用了这个方法count的值等于0，然后主线程就能通过await方法，恢复自己的任务。</p><p>与Join的区别：调用join方法需要等待thread执行完毕才能继续向下执行,而CountDownLatch只需要检查计数器的值为零就可以继续向下执行，相比之下，CountDownLatch更加灵活一些，可以实现一些更加复杂的业务场景。</p><h4 id="1-1-使用场景"><a href="#1-1-使用场景" class="headerlink" title="1.1 使用场景"></a>1.1 使用场景</h4><ol><li>开启多个线程分块下载一个大文件，每个线程只下载固定的一截，最后由另外一个线程来拼接所有的分段。</li><li>应用程序的主线程希望在负责启动框架服务的线程已经启动所有的框架服务之后再执行。</li><li>确保一个计算不会执行，直到所需要的资源被初始化。</li></ol><h4 id="1-2-主要方法"><a href="#1-2-主要方法" class="headerlink" title="1.2 主要方法"></a>1.2 主要方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//初始化计数的次数，不能重置</span><br><span class="line">public CountDownLatch(int count); </span><br><span class="line">//调用此方法则计数减1</span><br><span class="line">public void countDown();   </span><br><span class="line">//得到当前的计数</span><br><span class="line">Public Long getCount();           </span><br><span class="line">//调用此方法会一直阻塞当前线程，直到计时器的值为0，除非线程被中断。</span><br><span class="line">public void await() throws InterruptedException   </span><br><span class="line">//调用此方法会一直阻塞当前线程，直到计时器的值为0，除非线程被中断或者计数器超时，返回false代表计数器超时。</span><br><span class="line">Public boolean await(long timeout, TimeUnit unit)</span><br></pre></td></tr></table></figure><h4 id="1-3-使用案例"><a href="#1-3-使用案例" class="headerlink" title="1.3 使用案例"></a>1.3 使用案例</h4><ol><li>latch.countDown(); 建议放到finally语句里。</li><li>对这个计数器的操作都是原子操作，同时只能有一个线程去操作这个计数器。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class CountDownLatchTest &#123;</span><br><span class="line">    private final CountDownLatch latch = new CountDownLatch(3);</span><br><span class="line">    private final ReentrantLock lock = new ReentrantLock();</span><br><span class="line">    private int count;</span><br><span class="line"></span><br><span class="line">    public int getCount()&#123;</span><br><span class="line">        return this.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class RunnableTask implements Runnable&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                count += 100;</span><br><span class="line">            &#125;finally &#123;</span><br><span class="line">                latch.countDown();</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException&#123;</span><br><span class="line">        CountDownLatchTest demo = new CountDownLatchTest();</span><br><span class="line">        int i = 3;</span><br><span class="line">        while(i-- &gt; 0)&#123;</span><br><span class="line">            new Thread(demo.new RunnableTask()).start();</span><br><span class="line">        &#125;</span><br><span class="line">        demo.latch.await();</span><br><span class="line">        System.out.println(demo.getCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个线程分别对count加100，等三个线程执行完后，主线程输出count的值。输出300</p><h3 id="2-CyclicBarrier"><a href="#2-CyclicBarrier" class="headerlink" title="2. CyclicBarrier"></a>2. CyclicBarrier</h3><p>字面意思是可以循环使用的屏障。他要做的事情是让一组线程到达一个同步点时被阻塞，直到最后一个线程到达同步点，才会打开屏障，所有线程继续运行。</p><p>默认的构造方法 CyclicBarrier(int parties) ，参数代表屏障拦截的线程数量，每个线程调用await方法告诉CyclicBarrier已经到达屏障，然后被阻塞。</p><h4 id="1-1-使用场景-1"><a href="#1-1-使用场景-1" class="headerlink" title="1.1 使用场景"></a>1.1 使用场景</h4><p>可用于多线程计算数据，最后合并计算结果</p><h4 id="1-2-主要方法-1"><a href="#1-2-主要方法-1" class="headerlink" title="1.2 主要方法"></a>1.2 主要方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//初始化</span><br><span class="line">public CyclicBarrier(int parties)</span><br><span class="line">//barrierAction表示被拦住的线程需要执行的任务</span><br><span class="line">public CyclicBarrier(int parties, Runnable barrierAction)</span><br><span class="line">//被拦住的线程调用次函数进入阻塞状态</span><br><span class="line">public int await()</span><br><span class="line">//被拦住的线程调用次函数进入阻塞状态，超时唤醒</span><br><span class="line">public int await(long timeout, TimeUnit unit)</span><br><span class="line">public void reset() </span><br><span class="line">//返回需要被拦住的线程数量</span><br><span class="line">public int getParties() </span><br><span class="line">//查询此屏障是否处于断开状态</span><br><span class="line">public boolean isBroken()</span><br><span class="line">//返回已被拦住的线程数量</span><br><span class="line">public int getNumberWaiting()</span><br></pre></td></tr></table></figure><h4 id="1-3-使用案例-1"><a href="#1-3-使用案例-1" class="headerlink" title="1.3 使用案例"></a>1.3 使用案例</h4><p>初始化线程数为2，加上主线程调用await()3次，所以得出结论主线程调用不计入await次数之内。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class CyclicBarrierTest &#123;</span><br><span class="line">    private static CyclicBarrier cb = new CyclicBarrier(2);</span><br><span class="line">    private static ReentrantLock lock = new ReentrantLock();</span><br><span class="line">    private static int count;</span><br><span class="line">    public static class RunnableTask implements Runnable&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                count += 100;</span><br><span class="line">                cb.await();</span><br><span class="line">            &#125;catch (Throwable e)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        for(int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">            new Thread(new RunnableTask()).start();</span><br><span class="line">        &#125;</span><br><span class="line">        cb.await();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出200</p><h4 id="1-4-与CountDownLatch的区别"><a href="#1-4-与CountDownLatch的区别" class="headerlink" title="1.4 与CountDownLatch的区别"></a>1.4 与CountDownLatch的区别</h4><ul><li>CountDownLatch的计数器只能使用一次，而CyclicBarrier的计数器可以使用reset()方法重置，可以使用多次，所以CyclicBarrier能够处理更为复杂的场景；</li><li>CyclicBarrier还提供了一些其他有用的方法，比如getNumberWaiting()方法可以获得CyclicBarrier阻塞的线程数量，isBroken()方法用来了解阻塞的线程是否被中断；</li><li>CountDownLatch允许一个或多个线程等待一组事件的产生，而CyclicBarrier用于等待其他线程运行到栅栏位置。</li></ul><h3 id="3-Semaphore"><a href="#3-Semaphore" class="headerlink" title="3. Semaphore"></a>3. Semaphore</h3><p>Semaphore是用来控制同事访问特定资源的线程数量，它通过协调各个线程以保证合理的使用公共资源。</p><h4 id="3-1-使用场景"><a href="#3-1-使用场景" class="headerlink" title="3.1 使用场景"></a>3.1 使用场景</h4><p>可用于做流量控制，特别是公用资源有限的场景，比如数据库连接。</p><h3 id="4-Exchanger"><a href="#4-Exchanger" class="headerlink" title="4. Exchanger"></a>4. Exchanger</h3><p>Exchanger类可用于两个线程之间交换信息。可简单地将Exchanger对象理解为一个包含两个格子的容器，通过exchanger方法可以向两个格子中填充信息。当两个格子中的均被填充时，该对象会自动将两个格子的信息交换，然后返回给线程，从而实现两个线程的信息交换。</p><p>Exchanger类仅可用作两个线程的信息交换，当超过两个线程调用同一个exchanger对象时，得到的结果是不确定的，exchanger对象仅关心其包含的两个“格子”是否已被填充数据，当两个格子都填充数据完成时，该对象就认为线程之间已经配对成功，然后开始执行数据交换操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class ExchangerTest &#123;</span><br><span class="line">    private static Exchanger&lt;String&gt; exgr = new Exchanger&lt;&gt;();</span><br><span class="line">    private static ExecutorService threadpool = Executors.newFixedThreadPool(3);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        threadpool.execute(() -&gt; &#123;</span><br><span class="line">            String a = &quot;银行流水A&quot;;</span><br><span class="line">            try &#123;</span><br><span class="line">                exgr.exchange(a);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        threadpool.execute(() -&gt; &#123;</span><br><span class="line">            String b = &quot;银行流水B&quot;;</span><br><span class="line">            try &#123;</span><br><span class="line">                String a = exgr.exchange(b);</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125; catch (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        threadpool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在JDK的并发包中提供了几个非常有用的并发工具类。CountDownLatch、CyclicBarrier和Semaphore提供了并发流程控制手段，Exchanger提供了两个线程之间交换数据的手段，本文将配合应用场景介绍该如何使用这几个工具类。&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
    
      <category term="并发编程" scheme="http://zzkenyon.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>并发编程-共享式AQS源码详解</title>
    <link href="http://zzkenyon.github.io/2018/04/25/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%85%B1%E4%BA%AB%E5%BC%8FAQS%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
    <id>http://zzkenyon.github.io/2018/04/25/并发编程-共享式AQS源码详解/</id>
    <published>2018-04-25T12:36:12.000Z</published>
    <updated>2019-05-21T06:49:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章详细的阐述了AQS在独占模式下的底层原理，本篇主要讲述共享式同步器的原理。</p><h3 id="1-acquireShared-int"><a href="#1-acquireShared-int" class="headerlink" title="1. acquireShared(int)"></a>1. acquireShared(int)</h3><p>此方式是共享模式下线程获取贡献资源的入口，他会获取指定量的资源，获取成功直接返回，失败则进入等待队列，知道获取到资源为止，整个过程忽略终端。下面看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public final void acquireShared(int arg) &#123;</span><br><span class="line">    //</span><br><span class="line">    if (tryAcquireShared(arg) &lt; 0)</span><br><span class="line">        doAcquireShared(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected int tryAcquireShared(int arg) &#123;</span><br><span class="line">    throw new UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 tryAcquireShared 依然需要自定义同步器去实现，但是AQS已经将返回值的语义定义好了，重载该函数的时候执行逻辑要符合下列语义：<br>-返回负值表示获取失败</p><ul><li>返回0表示获取成功，但是没有剩余资源</li><li>返回正数表示获取成功，还有剩余资源</li></ul><p>tryAcquireShared获取失败则执行 doAcquireShared 方法，看下面源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">private void doAcquireShared(int arg) &#123;</span><br><span class="line">        //将线程以共享方式加入同步队列尾部</span><br><span class="line">        final Node node = addWaiter(Node.SHARED);</span><br><span class="line">        //获取失败吗，默认true（失败）</span><br><span class="line">        boolean failed = true;</span><br><span class="line">        try &#123;</span><br><span class="line">            //记录等待过程是否被中断过</span><br><span class="line">            boolean interrupted = false;</span><br><span class="line">            for (;;) &#123;</span><br><span class="line">                //拿到前驱节点</span><br><span class="line">                final Node p = node.predecessor();</span><br><span class="line">                if (p == head) &#123;//如果前驱是头结点</span><br><span class="line">                    //尝试获取</span><br><span class="line">                    int r = tryAcquireShared(arg);</span><br><span class="line">                    if (r &gt;= 0) &#123;</span><br><span class="line">                        //自己获取资源的同时，如果还有剩余资源,唤醒后继节点</span><br><span class="line">                        setHeadAndPropagate(node, r);</span><br><span class="line">                        p.next = null; // help GC</span><br><span class="line">                        if (interrupted)//补上中断标志</span><br><span class="line">                            selfInterrupt();</span><br><span class="line">                        failed = false;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //前驱不是头结点，获取失败后寻找安全点</span><br><span class="line">                if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                    parkAndCheckInterrupt())</span><br><span class="line">                    interrupted = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (failed)</span><br><span class="line">                cancelAcquire(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>整个过程与acquireQueued()很相似，区别在于唤醒等待线程的条件不同。setHeadAndPropagate方法在setHead()的基础上多了一步，就是自己苏醒的同时，如果条件符合（比如还有剩余资源），还会去唤醒后继结点，看代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private void setHeadAndPropagate(Node node, int propagate) &#123;</span><br><span class="line">    Node h = head; //与独占式不同原head并没有释放资源</span><br><span class="line">    setHead(node);</span><br><span class="line">    </span><br><span class="line">    if (propagate &gt; 0 || h == null || h.waitStatus &lt; 0 ||</span><br><span class="line">        (h = head) == null || h.waitStatus &lt; 0) &#123;</span><br><span class="line">        Node s = node.next;</span><br><span class="line">        if (s == null || s.isShared())</span><br><span class="line">            doReleaseShared();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-releaseShared"><a href="#2-releaseShared" class="headerlink" title="2. releaseShared()"></a>2. releaseShared()</h3><p>上一小节已经把acquireShared()说完了，这一小节就来讲讲它的反操作releaseShared()吧。此方法是共享模式下线程释放共享资源的顶层入口。它会释放指定量的资源，如果成功释放且允许唤醒等待线程，它会唤醒等待队列里的其他线程来获取资源。下面是releaseShared()的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public final boolean releaseShared(int arg) &#123;</span><br><span class="line">    if (tryReleaseShared(arg)) &#123;</span><br><span class="line">        doReleaseShared();</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法的流程也比较简单，一句话：释放掉资源后，唤醒后继。跟独占模式下的release()相似，但有一点稍微需要注意：独占模式下的tryRelease()在完全释放掉资源（state=0）后，才会返回true去唤醒其他线程，这主要是基于独占下可重入的考量；而共享模式下的releaseShared()则没有这种要求，共享模式实质就是控制一定量的线程并发执行，那么拥有资源的线程在释放掉部分资源时就可以唤醒后继等待结点。例如，资源总量是13，A（5）和B（7）分别获取到资源并发运行，C（4）来时只剩1个资源就需要等待。A在运行过程中释放掉2个资源量，然后tryReleaseShared(2)返回true唤醒C，C一看只有3个仍不够继续等待；随后B又释放2个，tryReleaseShared(2)返回true唤醒C，C一看有5个够自己用了，然后C就可以跟A和B一起运行。而ReentrantReadWriteLock读锁的tryReleaseShared()只有在完全释放掉资源（state=0）才返回true，所以自定义同步器可以根据需要决定tryReleaseShared()的返回值。</p><h4 id="2-1-doReleaseShared"><a href="#2-1-doReleaseShared" class="headerlink" title="2.1 doReleaseShared()"></a>2.1 doReleaseShared()</h4><p>此方法主要用于唤醒后继。下面是它的源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private void doReleaseShared() &#123;</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        if (h != null &amp;&amp; h != tail) &#123;</span><br><span class="line">            int ws = h.waitStatus;</span><br><span class="line">            if (ws == Node.SIGNAL) &#123;</span><br><span class="line">                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))</span><br><span class="line">                    continue;            // loop to recheck cases</span><br><span class="line">                unparkSuccessor(h);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (ws == 0 &amp;&amp;</span><br><span class="line">                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))</span><br><span class="line">                continue;                // loop on failed CAS</span><br><span class="line">        &#125;</span><br><span class="line">        if (h == head)                   // loop if head changed</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-Semaphore"><a href="#3-Semaphore" class="headerlink" title="3. Semaphore"></a>3. Semaphore</h3><p>一个具象化的例子：<br>停车场运作，假设停车场有10个车位，刚开始都是空的。如果同时来了11辆车，看守者只能允许10辆车进入，另一辆排队等候，当有车为空出来，等候车辆进入填满空车位。Semaphore就相当于停车场看守者。</p><p>和RentrantLock不同Semaphore没有实现Lock接口，获取资源有响应中断模式和忽略中断模式，中断模式获取资源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void acquire() throws InterruptedException &#123;</span><br><span class="line">    sync.acquireSharedInterruptibly(1);</span><br><span class="line">&#125;</span><br><span class="line">public void acquire(int i) throws InterruptedException &#123;</span><br><span class="line">    sync.acquireSharedInterruptibly(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放资源统一使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void release() &#123;</span><br><span class="line">    sync.releaseShared(1);</span><br><span class="line">&#125;</span><br><span class="line">public void release(int i) &#123;</span><br><span class="line">    sync.releaseShared(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部同步器sync重载的tryAcquireShared-tryRealseShared源码如下，代码逻辑简单易懂，实现自定义的同步器一般也只需要实现这几个方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//非公平</span><br><span class="line">final int nonfairTryAcquireShared(int acquires) &#123;</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        int available = getState();</span><br><span class="line">        int remaining = available - acquires;</span><br><span class="line">        if (remaining &lt; 0 ||</span><br><span class="line">            compareAndSetState(available, remaining))</span><br><span class="line">            return remaining;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//公平</span><br><span class="line">protected int tryAcquireShared(int acquires) &#123;</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        if (hasQueuedPredecessors())</span><br><span class="line">            return -1;</span><br><span class="line">        int available = getState();</span><br><span class="line">        int remaining = available - acquires;</span><br><span class="line">        if (remaining &lt; 0 ||</span><br><span class="line">            compareAndSetState(available, remaining))</span><br><span class="line">            return remaining;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected final boolean tryReleaseShared(int releases) &#123;</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        int current = getState();</span><br><span class="line">        int next = current + releases;</span><br><span class="line">        if (next &lt; current) // overflow</span><br><span class="line">            throw new Error(&quot;Maximum permit count exceeded&quot;);</span><br><span class="line">        if (compareAndSetState(current, next))</span><br><span class="line">            return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇文章详细的阐述了AQS在独占模式下的底层原理，本篇主要讲述共享式同步器的原理。&lt;/p&gt;
&lt;h3 id=&quot;1-acquireShared-int&quot;&gt;&lt;a href=&quot;#1-acquireShared-int&quot; class=&quot;headerlink&quot; title=&quot;1. ac
      
    
    </summary>
    
    
      <category term="并发编程" scheme="http://zzkenyon.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>nginx入门</title>
    <link href="http://zzkenyon.github.io/2018/04/23/nginx%E5%85%A5%E9%97%A8/"/>
    <id>http://zzkenyon.github.io/2018/04/23/nginx入门/</id>
    <published>2018-04-23T07:17:36.000Z</published>
    <updated>2019-04-26T07:17:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。</p><h3 id="1、正向代理与反向代理"><a href="#1、正向代理与反向代理" class="headerlink" title="1、正向代理与反向代理"></a>1、正向代理与反向代理</h3><h4 id="1-1-正向代理：代理服务器代表的是客户端，代理对服务器端透明。"><a href="#1-1-正向代理：代理服务器代表的是客户端，代理对服务器端透明。" class="headerlink" title="1.1 正向代理：代理服务器代表的是客户端，代理对服务器端透明。"></a>1.1 正向代理：代理服务器代表的是客户端，代理对服务器端透明。</h4><p>正向代理的应用场景：  </p><ul><li>vpn  </li><li>缓存，加速访问资源  </li><li>对客户端访问授权，上网进行认证  </li><li>记录用户的上网记录，对外隐藏用户信息  </li></ul><p>正向代理产品：CCProxy  </p><h4 id="1-2-反向代理：代理服务器代表的是服务器端，代理对客户端透明"><a href="#1-2-反向代理：代理服务器代表的是服务器端，代理对客户端透明" class="headerlink" title="1.2 反向代理：代理服务器代表的是服务器端，代理对客户端透明"></a>1.2 反向代理：代理服务器代表的是服务器端，代理对客户端透明</h4><p>反向代理的应用场景：</p><ul><li>保证内网的安全，可以使用反向代理提供WAF功能，阻止web攻击</li><li>负载均衡  </li></ul><p>反向代理产品：Nginx  </p><p><img src="http://ws1.sinaimg.cn/mw690/87c9e458gy1g2cldja14kj20rm0op7wh.jpg" alt="正向代理和反向代理">  </p><h3 id="2、nginx安装"><a href="#2、nginx安装" class="headerlink" title="2、nginx安装"></a>2、nginx安装</h3><h4 id="2-1-安装环境"><a href="#2-1-安装环境" class="headerlink" title="2.1 安装环境"></a>2.1 安装环境</h4><ul><li>yum -y install wget      #安装下载工具</li><li>yum install -y gcc gcc-c++        #安装gcc编译环境</li><li>yum install -y pcre-devel          #安装PERE库</li><li>yum -y install openssl openssl-devel    #安装OpenSsl库</li></ul><h4 id="2-2-准备安装nginx"><a href="#2-2-准备安装nginx" class="headerlink" title="2.2 准备安装nginx"></a>2.2 准备安装nginx</h4><ul><li>wget <a href="http://nginx.org/download/nginx-1.14.0.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.14.0.tar.gz</a>   #下载</li><li>tar -zxf nginx-1.14.0.tar.gz             #解压</li><li>cd nginx-1.14.0 </li><li>sed -i -e’s/1.14.0//g’ -e’ s/nginx\//WS/g’ -e’s/“NGINX”/“WS”/g’ src/core/nginx.h    #隐藏版本号(安全性考虑，爆出有些版本的nginx存在漏洞，容易被攻击)</li></ul><h4 id="2-3编译安装nginx"><a href="#2-3编译安装nginx" class="headerlink" title="2.3编译安装nginx"></a>2.3编译安装nginx</h4><ul><li>useradd www      #添加用户，不添加默认为nobody</li><li>./configure –user=www –group=www –prefix=/usr/local/nginx –with-http_ssl_module</li><li>make &amp; make install</li></ul><h3 id="3、nginx的五种负载分配算法"><a href="#3、nginx的五种负载分配算法" class="headerlink" title="3、nginx的五种负载分配算法"></a>3、nginx的五种负载分配算法</h3><h4 id="3-1-round-robin（默认）"><a href="#3-1-round-robin（默认）" class="headerlink" title="3.1 round robin（默认）"></a>3.1 round robin（默认）</h4><p>轮询方式，依次将请求分配到各个后台服务器中，默认的负载均衡方式。<br>适用于后台机器性能一致的情况。<br>挂掉的机器可以自动从服务列表中剔除。</p><h4 id="3-2-weight"><a href="#3-2-weight" class="headerlink" title="3.2 weight"></a>3.2 weight</h4><p>根据权重来分发请求到不同的机器中，指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream bakend &#123;    </span><br><span class="line">    server 192.168.0.14 weight=10;    </span><br><span class="line">    server 192.168.0.15 weight=10;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-3-IP-hash"><a href="#3-3-IP-hash" class="headerlink" title="3.3 IP_hash"></a>3.3 IP_hash</h4><p>根据请求者ip的hash值将请求发送到后台服务器中，可以保证来自同一ip的请求被打到固定的机器上，可以解决session问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream bakend &#123;    </span><br><span class="line">ip_hash;    </span><br><span class="line">server 192.168.0.14:88;    </span><br><span class="line">server 192.168.0.15:80;    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-url-hash（第三方）"><a href="#3-4-url-hash（第三方）" class="headerlink" title="3.4 url_hash（第三方）"></a>3.4 url_hash（第三方）</h4><p>根据请求的url的hash值将请求分到不同的机器中，当后台服务器为缓存的时候效率高。<br>例如：<br>在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;    </span><br><span class="line">    server squid1:3128;    </span><br><span class="line">    server squid2:3128;    </span><br><span class="line">    hash $request_uri;    </span><br><span class="line">    hash_method crc32;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-fair（第三方）"><a href="#3-5-fair（第三方）" class="headerlink" title="3.5 fair（第三方）"></a>3.5 fair（第三方）</h4><p>根据后台响应时间来分发请求，响应时间短的分发的请求多。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;    </span><br><span class="line">    server server1;    </span><br><span class="line">    server server2;    </span><br><span class="line">    fair;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。&lt;/p&gt;
&lt;h3 id=&quot;1、正向代理与反向
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://zzkenyon.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>并发编程-独占式AQS源码详解</title>
    <link href="http://zzkenyon.github.io/2018/04/19/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E7%8B%AC%E5%8D%A0%E5%BC%8FAQS%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
    <id>http://zzkenyon.github.io/2018/04/19/并发编程-独占式AQS源码详解/</id>
    <published>2018-04-19T12:36:12.000Z</published>
    <updated>2019-05-23T08:09:23.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-框架概述"><a href="#1-框架概述" class="headerlink" title="1. 框架概述"></a>1. 框架概述</h3><p>AQS是AbstractQueuedSynchronizer的简称，抽象队列同步器，AQS定义了一套多线程访问共享资源的同步器框架，许多同步类的实现都依赖于它，比如常用的ReentrantLock/CountDownLatch/Semaphore…</p><p>AQS维护了一个volatile int state 代表共享资源，一个FIFO线程等待队列用来记录争用资源而进入等待的线程，这里有一点需要强调，AQS同步队列中的线程是处于WAITING状态的，而竞争synchronized同步块的线程是处于BLOCKING状态的。</p><p>AQS定义了两种组员共享方式：Exclusive 和 Share</p><p>自定义同步器在实现时只需要实现共享资源state的获取与释放方式，至于具体的线程等待队列的维护，AQS已经实现好了。自定义同步器是现实需要实现的几个方法：</p><ul><li>isHeldExclusively() 该线程是否正在独占资源，只有用到Condition才需要实现它</li><li>tryAcquire(int) 独占方式获取资源，获取成功返回ture</li><li>tryRelease(int) 独占方式释放资源，释放成功返回ture</li><li>tryAcquireShared(int) 共享方式获取资源，负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</li><li>tryReleaseShared(int) 共享方式释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。</li></ul><p>以ReentrantLock为例，state初始化为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1。此后，其他线程再tryAcquire()时就会失败，直到A线程unlock()到state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A线程自己是可以重复获取此锁的（state会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证state是能回到零态的。</p><p>再以CountDownLatch以例，任务分为N个子线程去执行，state也初始化为N（注意N要与线程个数一致）。这N个子线程是并行执行的，每个子线程执行完后countDown()一次，state会CAS减1。等到所有子线程都执行完后(即state=0)，会unpark()主调用线程，然后主调用线程就会从await()函数返回，继续后余动作。</p><p>一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现tryAcquire-tryRelease、tryAcquireShared-tryReleaseShared中的一种即可。但AQS也支持自定义同步器同时实现独占和共享两种方式，如ReentrantReadWriteLock。</p><h3 id="2-源码详解"><a href="#2-源码详解" class="headerlink" title="2. 源码详解"></a>2. 源码详解</h3><p>本节依照acquire-release、acquireShared-releaseShared的次序来讲解AQS的源码实现。</p><h4 id="2-1-acquire-int"><a href="#2-1-acquire-int" class="headerlink" title="2.1 acquire(int)"></a>2.1 acquire(int)</h4><p>该方法是在独占模式下获取共享资源的底层入口，如果获取资源成功tryAcquire返回true，该函数直接返回，且整个过程忽略中断的影响；否则调用addWaiter将线程包装成Node对象进入阻塞队列，并不断acquireQueued获取资源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public final void acquire(int arg) &#123;</span><br><span class="line">    if (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>函数流程如下：</p><ol><li>tryAcquire() 尝试直接去获取资源，如果成功则直接返回；</li><li>addWaiter() 将该线程加入等待队列的尾部，并标记为独占模式；</li><li>acquireQueued() 使线程在等待队列中尝试获取资源，一直获取到资源后才返回。如果在整个等待过程中被中断过，则返回true，否则返回false。</li><li>如果线程在等待过程中被中断过，它是不响应的（关于中断的介绍请参考文章线程中断），获取资源后通过selfInterrupt()，将该线程的中断标志置为true。</li></ol><h5 id="2-1-1-tryAcquire-int"><a href="#2-1-1-tryAcquire-int" class="headerlink" title="2.1.1 tryAcquire(int)"></a>2.1.1 tryAcquire(int)</h5><p>此方法尝试获取独占资源，如果成功返回true，否则返回false。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected boolean tryAcquire(int arg) &#123;</span><br><span class="line">    throw new UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AQS中该方法没有具体的执行逻辑，这是因为这是AQS定义DE1一个方法模板，具体的实现需要自定义同步类自己完成，能不能重入，竞争资源时可不可以加塞，都需要子类自己设计。如果子类没有实现该方法，就会调用AQS的默认实现，如上直接抛出异常。</p><h5 id="2-1-2-addWaiter-Node"><a href="#2-1-2-addWaiter-Node" class="headerlink" title="2.1.2 addWaiter(Node)"></a>2.1.2 addWaiter(Node)</h5><p>此方法作用是将当前线程加入到阻塞队列的队尾，并返回当前线程所在节点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private Node addWaiter(Node mode) &#123;</span><br><span class="line">    Node node = new Node(Thread.currentThread(), mode);</span><br><span class="line">    // 尝试快速入队</span><br><span class="line">    Node pred = tail;</span><br><span class="line">    if (pred != null) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        if (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            return node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //快速入队失败，调用enq方法入队</span><br><span class="line">    enq(node);</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>先介绍一下Node，Node节点是对每一个竞争同步代码的线程的封装，主要包含了当前线程对象以及线程的状态。变量waitStatus表示当前Node节点的等待状态，共有4中取值CANCELLED、SIGNAL、CONDITION、PROPAGATE</p><ul><li>CANCELLED ： 值为1，表示当前节点处于结束状态，在同步队列中等待的线程等待超时或被中断，需要从同步队列中取消该Node节点</li><li>SIGNAL 值为-1，表示当前节点线程取消或者释放资源的时候，需要unpark其后继节点</li><li>CONDITION 值为-2，表示当前节点处于条件队列，在转变（状态被设为0）之前不会被当做同步队列节点</li><li>PROPAGATE 值为-3，与共享模式相关，在共享模式中，该状态标识结点的线程处于可运行状态</li><li>0 代表初始状态。</li></ul><h5 id="2-1-3-enq-Node"><a href="#2-1-3-enq-Node" class="headerlink" title="2.1.3 enq(Node)"></a>2.1.3 enq(Node)</h5><p>此方法用于将node加入队尾。源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private Node enq(final Node node) &#123;</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        Node t = tail;</span><br><span class="line">        if (t == null) &#123; // Must initialize</span><br><span class="line">            if (compareAndSetHead(new Node()))</span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            node.prev = t;</span><br><span class="line">            if (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                return t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果你看过AtomicInteger.getAndIncrement()函数源码，那么相信你一眼便看出这段代码的精华。CAS自旋volatile变量，是一种很经典的用法。</p><h5 id="2-1-4-acquireQueued-Node-int"><a href="#2-1-4-acquireQueued-Node-int" class="headerlink" title="2.1.4 acquireQueued(Node, int)"></a>2.1.4 acquireQueued(Node, int)</h5><p>通过tryAcquire()和addWaiter()，该线程获取资源失败，已经被放入等待队列尾部了，下一步该干什么？进入等待状态休息，直到其他线程彻底释放资源后唤醒自己，自己再拿到资源，然后就可以去干自己想干的事了。这个函数非常关键，上源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">final boolean acquireQueued(final Node node, int arg) &#123;</span><br><span class="line">    //获取资源失败了吗，true就是失败了</span><br><span class="line">    boolean failed = true;</span><br><span class="line">    try &#123;</span><br><span class="line">        //标识等待过程中是否被中断过</span><br><span class="line">        boolean interrupted = false;</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            //获得当前节点的前驱</span><br><span class="line">            final Node p = node.predecessor();</span><br><span class="line">            //如果前驱是head，那就有资格去尝试获取</span><br><span class="line">            if (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                //获取资源成功，将自己设置成head</span><br><span class="line">                setHead(node);</span><br><span class="line">                //help GC，原头结点断开与队列的链接，等待被回收</span><br><span class="line">                p.next = null; </span><br><span class="line">                failed = false;//表示获取资源成功</span><br><span class="line">                return interrupted; </span><br><span class="line">            &#125;</span><br><span class="line">            //先判断此次获取失败后可不可以 WAITTING，如果不能，继续重复循环</span><br><span class="line">            //执行park让线程进入WAITTING状态，并判断等待过程中有没有中断，发生过就改状态</span><br><span class="line">            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么怎么判断线程是不是应该执行park()呢？继续看下面代码，shouldParkAfterFailedAcquire方法主要用于检查状态，看看自己是否真的可以去休息了（进入waiting状态），万一排在队列前边的线程都放弃了只是瞎站着，那就需要往前加塞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) &#123;</span><br><span class="line">    //获取前驱节点的状态</span><br><span class="line">    int ws = pred.waitStatus;</span><br><span class="line">    //如果前驱节点状态是SIGNAL，说明前驱节点释放资源后会通知本节点，可以安全的执行park()</span><br><span class="line">    if (ws == Node.SIGNAL)</span><br><span class="line">        return true;</span><br><span class="line">    if (ws &gt; 0) &#123;</span><br><span class="line">        //如果前驱节点是取消状态CANCELLED，执行加塞操作，跳过所有取消节点</span><br><span class="line">        do &#123;</span><br><span class="line">            node.prev = pred = pred.prev;</span><br><span class="line">        &#125; while (pred.waitStatus &gt; 0);</span><br><span class="line">        pred.next = node;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //如果前驱节点状态正常有效，那就把前驱节点的状态设置成SIGNAL，前驱节点执行完释放资源就会通知本节点</span><br><span class="line">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">    &#125;</span><br><span class="line">    //返回false表示此次循环不能更改线程状态，返回到acquireQueued方法即系执行循环获取资源</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个流程用一句话概括，如果前驱结点的状态不是SIGNAL，那么自己就不能放心去休息，需要去找个安全的休息点，找到安全点后可以再尝试下看能不能获取资源，再次获取失败就可以放心进入WAITTING状态。</p><p>parkAndCheckInterrupt方法就是让线程执行park()进入WAITTINGZ状态，并返回该线程的中断标志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private final boolean parkAndCheckInterrupt() &#123;</span><br><span class="line">    LockSupport.park(this);</span><br><span class="line">    return Thread.interrupted();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意，Thread.interrupted()方法在获取线程中断标志的同事会将该标志复位为false</p><h5 id="2-1-5-小结"><a href="#2-1-5-小结" class="headerlink" title="2.1.5 小结"></a>2.1.5 小结</h5><p>源码再贴一遍：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public final void acquire(int arg) &#123;</span><br><span class="line">        if (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">            selfInterrupt();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>获取独占资源流程如下：<br><img src="https://zzk-markdown.oss-cn-hangzhou.aliyuncs.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/aqs.jpg" alt="AQS流程图"></p><ol><li>调用自定义同步器的tryAcquire()尝试直接去获取资源，如果成功则直接返回；</li><li>没成功，则addWaiter()将该线程加入等待队列的尾部；</li><li>acquireQueued()使线程在等待队列中休息，有机会时（轮到自己，会被unpark()）会去尝试获取资源。获取到资源后才返回。如果在整个等待过程中被中断过，则返回true，否则返回false。</li><li>如果线程在等待过程中被中断过，它是不响应的，并且中断标志被Thread.interrupted()重置为false了，所以获取资源后才再进行自我中断selfInterrupt()，将中断标志重置为true。</li></ol><h4 id="2-2-release-int"><a href="#2-2-release-int" class="headerlink" title="2.2 release(int)"></a>2.2 release(int)</h4><p>release是独占模式下线程释放共享资源的底层接口。它会释放指定量的资源，如果彻底释放了（即state=0），它会唤醒等待队列里的其他线程来获取资源。<br>源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public final boolean release(int arg) &#123;</span><br><span class="line">        if (tryRelease(arg)) &#123;</span><br><span class="line">            Node h = head;</span><br><span class="line">            if (h != null &amp;&amp; h.waitStatus != 0)</span><br><span class="line">                unparkSuccessor(h);//唤醒后继节点</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>逻辑并不复杂。它调用tryRelease()来释放资源。有一点需要注意的是，它是根据tryRelease()的返回值来判断该线程是否已经完成释放掉资源了。所以自定义同步器在设计tryRelease()的时候要明确这一点</p><h5 id="2-2-1-tryRelease-int"><a href="#2-2-1-tryRelease-int" class="headerlink" title="2.2.1 tryRelease(int)"></a>2.2.1 tryRelease(int)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected boolean tryRelease(int arg) &#123;</span><br><span class="line">    throw new UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟tryAcquire()一样，这个方法是需要独占模式的自定义同步器去实现的。正常来说，tryRelease()都会成功的，因为这是独占模式，该线程来释放资源，那么它肯定已经拿到独占资源了，直接减掉相应量的资源即可(state-=arg)，也不需要考虑线程安全的问题。但要注意它的返回值，上面已经提到了，release()是根据tryRelease()的返回值来判断该线程是否已经完成释放掉资源了！所以自义定同步器在实现时，如果已经彻底释放资源(state=0)，要返回true，否则返回false。</p><h5 id="2-2-2-unparkSuccessor-Node"><a href="#2-2-2-unparkSuccessor-Node" class="headerlink" title="2.2.2 unparkSuccessor(Node)"></a>2.2.2 unparkSuccessor(Node)</h5><p>此方法用于唤醒等待队列中下一个线程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private void unparkSuccessor(Node node) &#123;</span><br><span class="line">        //获取当前节点的状态</span><br><span class="line">        int ws = node.waitStatus;</span><br><span class="line">        if (ws &lt; 0)</span><br><span class="line">            compareAndSetWaitStatus(node, ws, 0);//置0</span><br><span class="line">        //获取下一个将唤醒的节点</span><br><span class="line">        Node s = node.next;</span><br><span class="line">        //若后继节点已取消，找到最靠近head的有效节点</span><br><span class="line">        if (s == null || s.waitStatus &gt; 0) &#123;</span><br><span class="line">            s = null;</span><br><span class="line">            for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)</span><br><span class="line">                //waitStatus&lt;=0的都是有效节点，都可以唤醒</span><br><span class="line">                if (t.waitStatus &lt;= 0)</span><br><span class="line">                    s = t;</span><br><span class="line">        &#125;</span><br><span class="line">        if (s != null)</span><br><span class="line">            LockSupport.unpark(s.thread);//唤醒</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>一句话概括，用用unpark()唤醒等待队列中最前边的那个有效线程。</p><h3 id="3-ReentrantLock"><a href="#3-ReentrantLock" class="headerlink" title="3. ReentrantLock"></a>3. ReentrantLock</h3><p>ReentrantLock自身没有继承AQS，但是它持有一个AQS的子类Sync的对象实例sync，Sync又派生了两个子类 FairSync 和 NonfairSync。ReentrantLock实例化时，无参的默认构造函数会使用NonfairSync对sync进行初始化；而接受一个布尔型变量的构造函数根据用户传入的参数决定使用公平锁还是非公平锁。</p><p>公平性是针对锁获取而言的，如果是公平锁，那么锁的获取顺序应该符合请求的绝对时间顺序，也就是FIFO，该原则保证公平的代价是进行大量的线程切换。非公平锁虽然可能造成线程饥饿，但是极少的线程切换保证了其更大的吞吐量，因此ReentrantLock默认实现非公平锁。</p><h4 id="3-1-获取锁"><a href="#3-1-获取锁" class="headerlink" title="3.1 获取锁"></a>3.1 获取锁</h4><p>下面代码是非公平锁和公平锁分别获取资源的操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">final boolean nonfairTryAcquire(int acquires) &#123;</span><br><span class="line">    //获取当前线程对象</span><br><span class="line">    final Thread current = Thread.currentThread();</span><br><span class="line">    int c = getState();</span><br><span class="line">    if (c == 0) &#123;//如果资源空闲，CAS设置状态量</span><br><span class="line">        if (compareAndSetState(0, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //如果资源被占用，判断持有锁的线程是不是本线程，是的话重入</span><br><span class="line">    else if (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        int nextc = c + acquires;</span><br><span class="line">        if (nextc &lt; 0) // overflow</span><br><span class="line">            throw new Error(&quot;Maximum lock count exceeded&quot;);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重入锁的意义就是持有锁的线程可以多次重复进入临界区，而不需要在同步队列中等待，每次进入状态量加1，进入几次就要释放几次，释放1次状态量减1，当状态量为0时，完全释放资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">protected final boolean tryAcquire(int acquires) &#123;</span><br><span class="line">    final Thread current = Thread.currentThread();</span><br><span class="line">    int c = getState();</span><br><span class="line">    if (c == 0) &#123;</span><br><span class="line">    //注意与非公平锁的区别</span><br><span class="line">        if (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">            compareAndSetState(0, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        int nextc = c + acquires;</span><br><span class="line">        if (nextc &lt; 0)</span><br><span class="line">            throw new Error(&quot;Maximum lock count exceeded&quot;);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较以上两个获取资源的函数，发现唯一的区别在于公平锁在设置状态量之前多做了一次判断 !hasQueuedPredecessors()，该函数返回是否有线程排在当前线程前面，如果没有则可以获得锁。hasQueuedPredecessors源码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public final boolean hasQueuedPredecessors() &#123;</span><br><span class="line">        Node t = tail; // Read fields in reverse initialization order</span><br><span class="line">        Node h = head;</span><br><span class="line">        Node s;</span><br><span class="line">        //队列中不止一个线程</span><br><span class="line">        //并且第二个线程节点为空或者第二个节点不是是自己</span><br><span class="line">        return h != t &amp;&amp;</span><br><span class="line">            ((s = h.next) == null || s.thread != Thread.currentThread());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-2-释放锁"><a href="#3-2-释放锁" class="headerlink" title="3.2 释放锁"></a>3.2 释放锁</h4><p>释放操作没有公平与非公平之分，所以释放操作是在父类Sync中实现，下面看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected final boolean tryRelease(int releases) &#123;</span><br><span class="line">    int c = getState() - releases;</span><br><span class="line">    //如果当前线程不是占用线程，抛异常</span><br><span class="line">    if (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">        throw new IllegalMonitorStateException();</span><br><span class="line">    boolean free = false;</span><br><span class="line">    //状态量等于0，才是真正释放</span><br><span class="line">    if (c == 0) &#123;</span><br><span class="line">        free = true;</span><br><span class="line">        setExclusiveOwnerThread(null);</span><br><span class="line">    &#125;</span><br><span class="line">    setState(c);</span><br><span class="line">    return free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为释放锁之前，当前线程还持有锁，其他线程无权访问，所以修改状态没有用CAS，直接使用setState</p><p>共享式同步器 请看下一篇 并发编程-共享式AQS源码详解</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-框架概述&quot;&gt;&lt;a href=&quot;#1-框架概述&quot; class=&quot;headerlink&quot; title=&quot;1. 框架概述&quot;&gt;&lt;/a&gt;1. 框架概述&lt;/h3&gt;&lt;p&gt;AQS是AbstractQueuedSynchronizer的简称，抽象队列同步器，AQS定义了一套多线
      
    
    </summary>
    
    
      <category term="并发编程" scheme="http://zzkenyon.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>spring-HV参数校验</title>
    <link href="http://zzkenyon.github.io/2018/04/02/spring-HV%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
    <id>http://zzkenyon.github.io/2018/04/02/spring-HV参数校验/</id>
    <published>2018-04-02T07:39:40.000Z</published>
    <updated>2019-05-23T02:59:16.742Z</updated>
    
    <content type="html"><![CDATA[<p>参数验证是一个常见的问题，无论是前端还是后台，都需对用户输入进行验证，以此来保证系统数据的正确性。对于web来说，有些人可能理所当然的想在前端验证就行了，但这样是非常错误的做法，前端代码对于用户来说是透明的，稍微有点技术的人就可以绕过这个验证，直接提交数据到后台。无论是前端网页提交的接口，还是提供给外部的接口，参数验证随处可见，也是必不可少的。前端做验证只是为了用户体验，比如控制按钮的显示隐藏，单页应用的路由跳转等等。后端才是最终的保障。总之，一切用户的输入都是不可信的。</p><h3 id="1、gradle依赖"><a href="#1、gradle依赖" class="headerlink" title="1、gradle依赖"></a>1、gradle依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;org.springframework.boot:spring-boot-starter-validation&apos;</span><br></pre></td></tr></table></figure><h3 id="2、常用约束"><a href="#2、常用约束" class="headerlink" title="2、常用约束"></a>2、常用约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Null             被注释的元素必须为 null     </span><br><span class="line">@NotNull          被注释的元素必须不为 null     </span><br><span class="line">@AssertTrue       被注释的元素必须为 true     </span><br><span class="line">@AssertFalse      被注释的元素必须为 false     </span><br><span class="line">@Min(value)       被注释的元素必须是一个数字，其值必须大于等于指定的最小值     </span><br><span class="line">@Max(value)       被注释的元素必须是一个数字，其值必须小于等于指定的最大值     </span><br><span class="line">@DecimalMin(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值 </span><br><span class="line">@DecimalMax(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值</span><br><span class="line">@Size(max=, min=)   被注释的元素的大小必须在指定的范围内     </span><br><span class="line">@Digits (integer, fraction)  被注释的元素必须是一个数字，其值必须在可接受的范围内     </span><br><span class="line">@Past   被注释的元素必须是一个过去的日期     </span><br><span class="line">@Future     被注释的元素必须是一个将来的日期     </span><br><span class="line">@Pattern(regex=,flag=)  被注释的元素必须符合指定的正则表达式Hibernate Validator附加的constraint     </span><br><span class="line">@NotBlank(message =)   验证字符串非null，且长度必须大于0     </span><br><span class="line">@Email  被注释的元素必须是电子邮箱地址     </span><br><span class="line">@Length(min=,max=)  被注释的字符串的大小必须在指定的范围内     </span><br><span class="line">@NotEmpty   被注释的字符串的必须非空     </span><br><span class="line">@Range(min=,max=,message=)  被注释的元素必须在合适的范围内</span><br></pre></td></tr></table></figure><h3 id="3、使用方法"><a href="#3、使用方法" class="headerlink" title="3、使用方法"></a>3、使用方法</h3><ul><li>在model类中使用注解约束字段</li><li>接口中需要校验的model对象前使用@Valid注解，并在接口方法参数列表中增加BindingResult对象来接受校验错误信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(value = &quot;/demo&quot;)</span><br><span class="line">    public Integer addDemo(@Valid @RequestBody Demo demo, BindingResult bindingResult)&#123;</span><br><span class="line">        if(bindingResult.hasErrors())&#123;</span><br><span class="line">            for(ObjectError error : bindingResult.getAllErrors())&#123;</span><br><span class="line">                throw new DemoException(DemoExceptionEnum.PARAM_ERROR.getCode(),error.getDefaultMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return demoService.insert(demo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：如果在一个接口中有多个参数需要校验，那么每一个参数都需要定义一个BindingResult对象来接收校验结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void test()(@RequestBody @Valid DemoModel demo, BindingResult result)</span><br><span class="line"></span><br><span class="line">public void test()(@RequestBody @Valid DemoModel demo, BindingResult result,@RequestBody @Valid DemoModel demo2, BindingResult result2)</span><br></pre></td></tr></table></figure><h3 id="4、深入使用"><a href="#4、深入使用" class="headerlink" title="4、深入使用"></a>4、深入使用</h3><h4 id="4-1-配置校验模式"><a href="#4-1-配置校验模式" class="headerlink" title="4.1 配置校验模式"></a>4.1 配置校验模式</h4><ul><li>默认的校验模式为<strong>普通模式</strong>，普通模式下会校验完所有的属性然后返回所有的校验失败信息</li><li>可配置为<strong>快速失败返回模式</strong>，只要有一个属性校验失败则立即返回</li></ul><blockquote><p>配置方式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ValidatorConfiguration &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public Validator validator()&#123;</span><br><span class="line">        ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator.class )</span><br><span class="line">                .configure()</span><br><span class="line">            　　/**设置validator模式为快速失败返回*/</span><br><span class="line">                .addProperty( &quot;hibernate.validator.fail_fast&quot;, &quot;true&quot; )</span><br><span class="line">                .buildValidatorFactory();</span><br><span class="line">        Validator validator = validatorFactory.getValidator();</span><br><span class="line"></span><br><span class="line">        return validator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-分组校验"><a href="#4-2-分组校验" class="headerlink" title="4.2 分组校验"></a>4.2 分组校验</h4><ul><li><p>使用场景：针对同一个model类，不同的接口需要对不同的属性进行校验  </p><blockquote><p>例如，数据插入接口与数据更新接口需要校验的参数是不同的</p><ul><li>使用方法  <ol><li>在model类中定义内部接口 </li><li>约束增加组别属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;    public class Demo&#123;</span><br><span class="line">&gt;        public interface AddGorup&#123;&#125;</span><br><span class="line">&gt;        public interface UpdateGroup&#123;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ul></blockquote><pre><code>@Range(min = 1,max = Integer.MAX_VALUE,groups = {UpdateGroup.class})private Integer id;@Email(groups = {AddGroup.class,UpdateGroup.class})private String email;@Past(groups = {UpdateGroup.class})private Date birthday; </code></pre><p>  }</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   3. 在接口中使用@Validated(&#123;Demo.AddGroup.class&#125;)来注解参数，表示该参数使用AddGroup来进行校验</span><br><span class="line">     </span><br><span class="line">     &gt;约束的groups属性中可以填写多个接口名，表示该参数加入多个组进行校验</span><br><span class="line">   4. </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 4.3 自定义约束</span><br><span class="line">- 创建约束标注</span><br></pre></td></tr></table></figure></li></ul><p>@Target({ElementType.METHOD,ElementType.ANNOTATION_TYPE,ElementType.FIELD,ElementType.PARAMETER})<br>@Retention(RetentionPolicy.RUNTIME)<br>@Constraint(validatedBy = DemoConstraintValidator.class)<br>@Documented<br>public @interface DemoConstraint {<br>    String message() default “default message”;<br>    Class&lt;?&gt;[] groups() default {};<br>    Class&lt;? extends Payload&gt;[] payload() default {};<br>    E value();//约束中设置的value值<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 实现一个验证器</span><br></pre></td></tr></table></figure></p><p>/**</p><ul><li>T  自定义的约束注解类型DemoConstraint</li><li><p>V  需要检验的参数类型<br>public class DemoConstraintValidator implements ConstraintValidator&lt;T, V&gt;{<br> private E value;//注入设置的具体约束<br> @Override<br> public void initialize(T t) {</p><pre><code>this.value = t.value();</code></pre><p> }</p><p> @Override<br> public boolean isValid(V v, ConstraintValidatorContext constraintValidatorContext) {</p><pre><code>//根据value 对 参数v 进行一些判断return true;if(!isValid) {    constraintContext.disableDefaultConstraintViolation();    constraintContext.buildConstraintViolationWithTemplate(&quot;new default message&quot;).addConstraintViolation();    return false;}</code></pre><p> }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  &gt;T表示创建的注解，V表示该约束校验的数据类型</span><br><span class="line">- 定义默认的验证错误信息  </span><br><span class="line">可以通过ConstraintValidatorContext修改默认的message信息，一旦使用，在注解中给message赋值将不起作用（一般情况下不推荐使用）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 4.4 检验组序列</span><br><span class="line">默认情况下，约束的计算没有特定的顺序，这与它们属于哪个组无关。然而，在某些情况下，控制约束求值的顺序是有用的，例如，我们可以要求在检查汽车的道路价值之前，首先通过所有默认的汽车约束。最后，在我们开车离开之前，我们检查了实际司机的约束条件。为了实现这样的顺序，需要定义一个新的接口，并使用@GroupSequence对其进行注释，以定义必须验证组的顺序。</span><br><span class="line">~~~</span><br><span class="line">注意：</span><br><span class="line">如果这个校验组序列中有一个约束条件没有通过验证的话, 那么此约束条件后面的都不会再继续被校验了.</span><br><span class="line">~~~</span><br></pre></td></tr></table></figure></li></ul><p>@GroupSequence({Default.class, CarChecks.class, DriverChecks.class})<br>public interface OrderedChecks {<br>}<br><code>`</code></p><h3 id="5、-Valid-amp-Validated"><a href="#5、-Valid-amp-Validated" class="headerlink" title="5、@Valid  &amp; @Validated"></a>5、@Valid  &amp; @Validated</h3><table><thead><tr><th>用法</th><th style="text-align:center">@valid</th><th style="text-align:center">@validated</th></tr></thead><tbody><tr><td>类名前</td><td style="text-align:center"></td><td style="text-align:center">√</td></tr><tr><td>类属性前</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td>方法前</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td>入参前</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr></tbody></table><blockquote><ul><li>类名前是否加@Validated只影响@RequestParam注解的参数校验，如要进行校验，必须加。  </li><li>不需要分组校验的情况下，接口入参之前只能注解@Valid才能正常校验</li><li>需要分组校验的时候，接口入参之前需要使用@Validated({GroupA.class,…})才能正常校验</li><li>@Valid用在类成员属性名之前，是为了实现嵌套校验</li></ul></blockquote><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://docs.jboss.org/hibernate/validator/4.2/reference/zh-CN/html_single/#preface" target="_blank" rel="noopener">官方文档</a><br><a href="https://www.cnblogs.com/mr-yang-localhost/p/7812038.html" target="_blank" rel="noopener">springboot使用hibernate validator校验</a><br><a href="https://blog.csdn.net/qq_27680317/article/details/79970590" target="_blank" rel="noopener">@Validated和@Valid区别</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参数验证是一个常见的问题，无论是前端还是后台，都需对用户输入进行验证，以此来保证系统数据的正确性。对于web来说，有些人可能理所当然的想在前端验证就行了，但这样是非常错误的做法，前端代码对于用户来说是透明的，稍微有点技术的人就可以绕过这个验证，直接提交数据到后台。无论是前端
      
    
    </summary>
    
    
      <category term="spring" scheme="http://zzkenyon.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>并发编程-线程中断</title>
    <link href="http://zzkenyon.github.io/2018/03/20/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD/"/>
    <id>http://zzkenyon.github.io/2018/03/20/并发编程-线程中断/</id>
    <published>2018-03-20T12:36:12.000Z</published>
    <updated>2019-05-17T04:52:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>中断可以理解为现成的一个标识位属性，它表示一个运行中的线程是否被被其他线程进行了中断操作。中断好比其他线程对该线程打了个招呼，其他线程通过调用该线程的interrupt()方法对其进行中断操作。</p><p>线程通过检查自身是否被中断来进行响应，线程通过方法 isInterrupted()来进行判断是否被中断，也可以调用静态方法Thread.interrupted()对当前线程的中断标识进行复位。如果该线程已经处于中介状态，即使该线程被中断过，在调用该线程对象的isInterrupted()时依旧会返回false。</p><p>本篇将从以下两个方面来介绍Java中对线程中断机制的具体实现：</p><ol><li>Java中对线程中断所提供的API支持</li><li>线程在不同状态下对于中断所产生的反应</li></ol><h3 id="1-Java中线程中断的API"><a href="#1-Java中线程中断的API" class="headerlink" title="1. Java中线程中断的API"></a>1. Java中线程中断的API</h3><p>在以前的jdk版本中，我们使用stop方法中断线程，但是现在的jdk版本中已经不再推荐使用该方法了，反而由以下三个方法完成对线程中断的支持。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public boolean isInterrupted()</span><br><span class="line"></span><br><span class="line">public void interrupt()</span><br><span class="line"></span><br><span class="line">public static boolean interrupted()</span><br></pre></td></tr></table></figure></p><p>每个线程都一个状态位用于标识当前线程对象是否是中断状态。isInterrupted是一个实例方法，主要用于判断当前线程对象的中断标志位是否被标记了，如果被标记了则返回true表示当前已经被中断，否则返回false。我们也可以看看它的实现源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean isInterrupted() &#123;</span><br><span class="line">        return isInterrupted(false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private native boolean isInterrupted(boolean ClearInterrupted);</span><br></pre></td></tr></table></figure><p>底层调用的本地方法isInterrupted，传入一个boolean类型的参数，用于指定调用该方法之后是否需要清除该线程对象的中断标识位。从这里我们也可以看出来，调用isInterrupted并不会清除线程对象的中断标识位。</p><p>interrupt也是一个实例方法，该方法用于设置线程对象的中断标识位，只要能获取到实例对象，就能调用该方法。</p><p>interrupted是一个静态的方法，用于返回当前线程是否被中断，并清空标志位。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static boolean interrupted() &#123;</span><br><span class="line">    return currentThread().isInterrupted(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private native boolean isInterrupted(boolean ClearInterrupted);</span><br></pre></td></tr></table></figure><p>该方法用于判断当前线程是否被中断，并且该方法调用结束的时候会清空中断标识位。下面我们看看线程所处不同状态下对于中断操作的反应。</p><h3 id="2-线程在不同状态下对于中断所产生的反应"><a href="#2-线程在不同状态下对于中断所产生的反应" class="headerlink" title="2. 线程在不同状态下对于中断所产生的反应"></a>2. 线程在不同状态下对于中断所产生的反应</h3><p>线程一共6种状态，分别是NEW，RUNNABLE，BLOCKED，WAITING，TIMED_WAITING，TERMINATED（Thread类中有一个State枚举类型列举了线程的所有状态）。下面我们就将把线程分别置于上述的不同种状态，然后看看我们的中断操作对它们的影响。</p><h4 id="2-1-NEW和TERMINATED"><a href="#2-1-NEW和TERMINATED" class="headerlink" title="2.1 NEW和TERMINATED"></a>2.1 NEW和TERMINATED</h4><p>线程的new状态表示还未调用start方法，还未真正启动。线程的terminated状态表示线程已经运行终止。这两个状态下调用中断方法来中断线程的时候，Java认为毫无意义，所以并不会设置线程的中断标识位，什么事也不会发生。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    Thread thread = new MyThread();</span><br><span class="line">    System.out.println(thread.getState());</span><br><span class="line">    thread.interrupt();</span><br><span class="line">    System.out.println(thread.isInterrupted());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NEW</span><br><span class="line">fales</span><br></pre></td></tr></table></figure></p><p>terminated状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    Thread thread = new MyThread();</span><br><span class="line">    thread.start();</span><br><span class="line">    thread.join();</span><br><span class="line">    System.out.println(thread.getState());</span><br><span class="line">    thread.interrupt();</span><br><span class="line">    System.out.println(thread.isInterrupted());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TERMINATED</span><br><span class="line">false</span><br></pre></td></tr></table></figure></p><p>从上述的两个例子来看，对于处于new和terminated状态的线程对于中断是屏蔽的，也就是说中断操作对这两种状态下的线程是无效的。</p><h4 id="2-2-RUNNABLE"><a href="#2-2-RUNNABLE" class="headerlink" title="2.2 RUNNABLE"></a>2.2 RUNNABLE</h4><p>如果线程处于运行状态，那么该线程的状态就是RUNNABLE，但是不一定所有处于RUNNABLE状态的线程都能获得CPU运行，在某个时间段，只能由一个线程占用CPU，那么其余的线程虽然状态是RUNNABLE，但是都没有处于运行状态。而我们处于RUNNABLE状态的线程在遭遇中断操作的时候只会设置该线程的中断标志位，并不会让线程实际中断，想要发现本线程已经被要求中断了则需要用程序去判断。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        while(true)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    Thread thread = new MyThread();</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(thread.getState());</span><br><span class="line"></span><br><span class="line">    thread.interrupt();</span><br><span class="line">    Thread.sleep(1000);//等到thread线程被中断之后</span><br><span class="line">    System.out.println(thread.isInterrupted());</span><br><span class="line">    System.out.println(thread.getState());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义的线程始终循环做一些事情，主线程启动该线程并输出该线程的状态，然后调用中断方法中断该线程并再次输出该线程的状态。总的输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUNNABLE</span><br><span class="line">ture</span><br><span class="line">RUNNABLE</span><br></pre></td></tr></table></figure><p>可以看到在我们启动线程之后，线程状态变为RUNNABLE，中断之后输出中断标志，显然中断位已经被标记，但是当我们再次输出线程状态的时候发现，线程仍然处于RUNNABLE状态。很显然，处于RUNNBALE状态下的线程即便遇到中断操作，也只会设置中断标志位并不会实际中断线程运行。那么问题是，既然不能直接中断线程，我要中断标志有何用处？<br>这里其实Java将这种权力交给了我们的程序，Java给我们提供了一个中断标志位，我们的程序可以通过if判断中断标志位是否被设置来中断我们的程序而不是系统强制的中断。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void run()&#123;</span><br><span class="line">    while(true)&#123;</span><br><span class="line">        if (Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">            System.out.println(&quot;exit MyThread&quot;);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程一旦发现自己的中断标志为被设置了，立马跳出死循环。这样的设计好处就在于给了我们程序更大的灵活性。</p><h4 id="2-3-BLOCKED"><a href="#2-3-BLOCKED" class="headerlink" title="2.3 BLOCKED"></a>2.3 BLOCKED</h4><p>当线程处于BLOCKED状态说明该线程由于竞争某个对象的锁失败而被挂在了该对象的阻塞队列上了。那么此时发起中断操作不会对该线程产生任何影响，依然只是设置中断标志位。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread&#123;</span><br><span class="line">    public synchronized static void doSomething()&#123;</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            //do something</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我们自定义了一个线程类，run方法中主要就做一件事情，调用一个有锁的静态方法，该方法内部是一个死循环（占用该锁让其他线程阻塞）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    Thread thread1 = new MyThread();</span><br><span class="line">    thread1.start();</span><br><span class="line"></span><br><span class="line">    Thread thread2 = new MyThread();</span><br><span class="line">    thread2.start();</span><br><span class="line"></span><br><span class="line">    Thread.sleep(1000);</span><br><span class="line">    System.out.println(thread1.getState());</span><br><span class="line">    System.out.println(thread2.getState());</span><br><span class="line"></span><br><span class="line">    thread2.interrupt();</span><br><span class="line">    System.out.println(thread2.isInterrupted());</span><br><span class="line">    System.out.println(thread2.getState());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在我们的主线程中，我们定义了两个线程并按照定义顺序启动他们，显然thread1启动后便占用MyThread类锁，此后thread2在获取锁的时候一定失败，自然被阻塞在阻塞队列上，而我们对thread2进行中断，输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RUNNABLE</span><br><span class="line">BLOCKED</span><br><span class="line">true</span><br><span class="line">BLOCKED</span><br></pre></td></tr></table></figure></p><p>从输出结果看来，thread2处于BLOCKED状态，执行中断操作之后，该线程仍然处于BLOCKED状态，但是中断标志位却已被修改。这种状态下的线程和处于RUNNABLE状态下的线程是类似的，给了我们程序更大的灵活性去判断和处理中断。</p><h4 id="2-4-WAITING-TIMED-WAITING"><a href="#2-4-WAITING-TIMED-WAITING" class="headerlink" title="2.4 WAITING/TIMED_WAITING"></a>2.4 WAITING/TIMED_WAITING</h4><p>这两种状态本质上是同一种状态，只不过TIMED_WAITING在等待一段时间后会自动释放自己，而WAITING则是无限期等待，需要其他线程调用notify方法释放自己。但是他们都是线程在运行的过程中由于缺少某些条件而被挂起在某个对象的等待队列上。当这些线程遇到中断操作的时候，会抛出一个InterruptedException异常，并清空中断标志位。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        synchronized (this)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(&quot;i am waiting but facing interruptexception now&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们定义了一个线程类，其中run方法让当前线程阻塞到条件队列上，并且针对InterruptedException 进行捕获，如果遇到InterruptedException 异常则输出一行信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    Thread thread = new MyThread();</span><br><span class="line">    thread.start();</span><br><span class="line"></span><br><span class="line">    Thread.sleep(500);</span><br><span class="line">    System.out.println(thread.getState());</span><br><span class="line">    thread.interrupt();</span><br><span class="line">    Thread.sleep(1000);</span><br><span class="line">    System.out.println(thread.isInterrupted());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在main线程中我们启动一个MyThread线程，然后对其进行中断操作。运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WAITING</span><br><span class="line">i am waiting but facing interruptexception now</span><br><span class="line">false</span><br></pre></td></tr></table></figure></p><p>从运行结果看，当前程thread启动之后就被挂起到该线程对象的条件队列上，然后我们调用interrupt方法对该线程进行中断，输出了我们在catch中的输出语句，显然是捕获了InterruptedException异常，接着就看到该线程的中断标志位被清空。</p><p>综上所述，我们分别介绍了不同种线程的不同状态下对于中断请求的反应。NEW和TERMINATED对于中断操作几乎是屏蔽的，RUNNABLE和BLOCKED类似，对于中断操作只是设置中断标志位并没有强制终止线程，对于线程的终止权利依然在程序手中。WAITING/TIMED_WAITING状态下的线程对于中断操作是敏感的，他们会抛出异常并清空中断标志位。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;中断可以理解为现成的一个标识位属性，它表示一个运行中的线程是否被被其他线程进行了中断操作。中断好比其他线程对该线程打了个招呼，其他线程通过调用该线程的interrupt()方法对其进行中断操作。&lt;/p&gt;
&lt;p&gt;线程通过检查自身是否被中断来进行响应，线程通过方法 isInte
      
    
    </summary>
    
    
      <category term="并发编程" scheme="http://zzkenyon.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>源码分析-SimpleDateFormat的用法以及线程安全</title>
    <link href="http://zzkenyon.github.io/2017/12/21/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-SimpleDateFormat%E7%9A%84%E7%94%A8%E6%B3%95%E4%BB%A5%E5%8F%8A%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    <id>http://zzkenyon.github.io/2017/12/21/源码分析-SimpleDateFormat的用法以及线程安全/</id>
    <published>2017-12-21T01:02:32.000Z</published>
    <updated>2019-05-23T03:00:04.545Z</updated>
    
    <content type="html"><![CDATA[<p>开发中我们经常会用到时间相关类，我们有很多办法在Java代码中获取时间。但是不同的方法获取到的时间的格式都不尽相同，这时候就需要一种格式化工具，把时间显示成我们需要的格式。最常用的方法就是使用SimpleDateFormat类。这是一个看上去功能比较简单的类，但是，一旦使用不当也有可能导致很大的问题。</p><p>在阿里巴巴Java开发手册中，有如下明确规定：<br><img src="http://wx2.sinaimg.cn/mw690/87c9e458gy1g2df391sgsj20u002qmy9.jpg" alt="image"><br>本文就围绕SimpleDateFormat的用法、原理等来深入分析下如何以正确使用它。</p><h3 id="1-SimpleDateFormat用法"><a href="#1-SimpleDateFormat用法" class="headerlink" title="1. SimpleDateFormat用法"></a>1. SimpleDateFormat用法</h3><h4 id="1-1-基本用法"><a href="#1-1-基本用法" class="headerlink" title="1.1 基本用法"></a>1.1 基本用法</h4><p>SimpleDateFormat是java提供的能对时间格式化及解析的工具类。  </p><ul><li><p>格式化：将规范日期格式化成日期文本（时间字符串）  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">String dateStr = sdf.format(new Date());</span><br></pre></td></tr></table></figure></li><li><p>解析： 将文本日期解析成规范化的时间格式  </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date d = sdf.parse(dataStr);</span><br></pre></td></tr></table></figure><p>用户可以自定义文本日期的格式，通过字母来描述时间元素，并组装成想要的日期和时间格式。常用的时间元素和字母的对应表如下：<br><img src="http://wx4.sinaimg.cn/mw690/87c9e458gy1g2dfj3v4y8j20u00le7ci.jpg" alt="模板定义"><br>模式字母通常是重复的，其数量确定其精确表示。如下表是常用的输出格式的表示方法。<br><img src="http://wx4.sinaimg.cn/mw690/87c9e458gy1g2dfklzoizj20tq0bgwko.jpg" alt="image">  </p><h4 id="1-2-时区"><a href="#1-2-时区" class="headerlink" title="1.2 时区"></a>1.2 时区</h4><p>如何在Java代码中获取不同时区的时间呢？SimpleDateFormat可以实现这个功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        System.out.println(sdf.format(Calendar.getInstance().getTime()));</span><br><span class="line">        sdf.setTimeZone(TimeZone.getTimeZone(&quot;America/Los_Angeles&quot;));</span><br><span class="line">        System.out.println(sdf.format(Calendar.getInstance().getTime()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>以上代码，输出的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-04-24 09:26:38</span><br><span class="line">2019-04-23 18:26:38</span><br></pre></td></tr></table></figure><p>中国的时间第一行，而美国洛杉矶时间比中国北京时间慢了17个小时（这还和冬夏令时有关系）。<br>当然，这不是显示其他时区的唯一方法</p><h3 id="2-SimpleDateFormat线程安全性"><a href="#2-SimpleDateFormat线程安全性" class="headerlink" title="2. SimpleDateFormat线程安全性"></a>2. SimpleDateFormat线程安全性</h3><p>由于SimpleDateFormat比较常用，而且在一般情况下，一个应用中的时间显示模式都是一样的，所以很多人愿意使用如下方式定义SimpleDateFormat：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">   private static SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">        sdf.setTimeZone(TimeZone.getTimeZone(&quot;America/New_York&quot;));</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种定义方式，存在很大的线程安全隐患。  </p><h4 id="2-1-问题重现"><a href="#2-1-问题重现" class="headerlink" title="2.1 问题重现"></a>2.1 问题重现</h4><p>以下代码使用线程池来执行时间输出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 定义一个全局的SimpleDateFormat</span><br><span class="line">    */</span><br><span class="line">   private static SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 使用ThreadFactoryBuilder定义一个线程池</span><br><span class="line">    */</span><br><span class="line">   private static ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()</span><br><span class="line">       .setNameFormat(&quot;demo-pool-%d&quot;).build();</span><br><span class="line"></span><br><span class="line">   private static ExecutorService pool = new ThreadPoolExecutor(5, 200,</span><br><span class="line">       0L, TimeUnit.MILLISECONDS,</span><br><span class="line">       new LinkedBlockingQueue&lt;Runnable&gt;(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 定义一个CountDownLatch，保证所有子线程执行完之后主线程再执行</span><br><span class="line">    */</span><br><span class="line">   private static CountDownLatch countDownLatch = new CountDownLatch(100);</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">       //定义一个线程安全的HashSet</span><br><span class="line">       Set&lt;String&gt; dates = Collections.synchronizedSet(new HashSet&lt;String&gt;());</span><br><span class="line">       for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">           //获取当前时间</span><br><span class="line">           Calendar calendar = Calendar.getInstance();</span><br><span class="line">           int finalI = i;</span><br><span class="line">           pool.execute(() -&gt; &#123;</span><br><span class="line">                   //时间增加</span><br><span class="line">                   calendar.add(Calendar.DATE, finalI);</span><br><span class="line">                   //通过simpleDateFormat把时间转换成字符串</span><br><span class="line">                   String dateString = sdf.format(calendar.getTime());</span><br><span class="line">                   //把字符串放入Set中</span><br><span class="line">                   dates.add(dateString);</span><br><span class="line">                   //countDown</span><br><span class="line">                   countDownLatch.countDown();</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">       //阻塞，直到countDown数量为0</span><br><span class="line">       countDownLatch.await();</span><br><span class="line">       //输出去重后的时间个数</span><br><span class="line">       System.out.println(dates.size());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码，其实比较容易理解。就是循环一百次，每次循环的时候都在当前时间基础上增加一个天数（这个天数随着循环次数而变化），然后把所有日期放入一个线程安全的、带有去重功能的Set中，然后输出Set中元素个数。 </p><p>正常情况下，以上代码输出结果应该是100。但是实际执行结果是一个小于100的数字。</p><p>原因就是因为SimpleDateFormat作为一个非线程安全的类，被当做了共享变量在多个线程中进行使用，这就出现了线程安全问题。</p><h4 id="2-2-线程不安全原因"><a href="#2-2-线程不安全原因" class="headerlink" title="2.2 线程不安全原因"></a>2.2 线程不安全原因</h4><p>其实，JDK文档中已经明确表明了SimpleDateFormat不应该用在多线程场景中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date formats are not synchronized.</span><br><span class="line">It is recommended to create separate format instances for each thread.</span><br><span class="line">If multiple threads access a format concurrently, it must be synchronized externally.</span><br></pre></td></tr></table></figure></p><p>那么为什么会出现这种问题，SimpleDateFormat底层到底是怎么实现的？<br>跟踪一下SimpleDateFormat类中format方法的实现其实就能发现端倪。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public StringBuffer format(Date date, StringBuffer toAppendTo,</span><br><span class="line">                               FieldPosition pos)</span><br><span class="line">    &#123;</span><br><span class="line">        pos.beginIndex = pos.endIndex = 0;</span><br><span class="line">        return format(date, toAppendTo, pos.getFieldDelegate());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Called from Format after creating a FieldDelegate</span><br><span class="line">    private StringBuffer format(Date date, StringBuffer toAppendTo,</span><br><span class="line">                                FieldDelegate delegate) &#123;</span><br><span class="line">        // Convert input date to time field list</span><br><span class="line">        calendar.setTime(date);</span><br><span class="line"></span><br><span class="line">        boolean useDateFormatSymbols = useDateFormatSymbols();</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; compiledPattern.length; ) &#123;</span><br><span class="line">            int tag = compiledPattern[i] &gt;&gt;&gt; 8;</span><br><span class="line">            int count = compiledPattern[i++] &amp; 0xff;</span><br><span class="line">            if (count == 255) &#123;</span><br><span class="line">                count = compiledPattern[i++] &lt;&lt; 16;</span><br><span class="line">                count |= compiledPattern[i++];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            switch (tag) &#123;</span><br><span class="line">            case TAG_QUOTE_ASCII_CHAR:</span><br><span class="line">                toAppendTo.append((char)count);</span><br><span class="line">                break;</span><br><span class="line"></span><br><span class="line">            case TAG_QUOTE_CHARS:</span><br><span class="line">                toAppendTo.append(compiledPattern, i, count);</span><br><span class="line">                i += count;</span><br><span class="line">                break;</span><br><span class="line"></span><br><span class="line">            default:</span><br><span class="line">                subFormat(tag, count, delegate, toAppendTo, useDateFormatSymbols);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return toAppendTo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>SimpleDateFormat中的format方法在执行过程中，会使用一个成员变量calendar来保存时间。这其实就是问题的关键。</p><p>由于我们在声明SimpleDateFormat的时候，使用的是static定义的。那么这个SimpleDateFormat就是一个共享变量，随之，SimpleDateFormat中的calendar也就可以被多个线程访问到。</p><p>假设线程1刚刚执行完calendar.setTime把时间设置成2018-11-11，还没等执行完，线程2又执行了calendar.setTime把时间改成了2018-12-12。这时候线程1继续往下执行，拿到的calendar.getTime得到的时间就是线程2改过之后的。</p><p>除了format方法以外，SimpleDateFormat的parse方法也有同样的问题。</p><h3 id="3-如何解决"><a href="#3-如何解决" class="headerlink" title="3. 如何解决"></a>3. 如何解决</h3><p>解决方法有很多，先介绍三个比较常用的方法。</p><h4 id="3-1-使用局部变量"><a href="#3-1-使用局部变量" class="headerlink" title="3.1 使用局部变量"></a>3.1 使用局部变量</h4><p>SimpleDateFormat变成了局部变量，就不会被多个线程同时访问到了，就避免了线程安全问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">   //获取当前时间</span><br><span class="line">   Calendar calendar = Calendar.getInstance();</span><br><span class="line">   int finalI = i;</span><br><span class="line">   pool.execute(() -&gt; &#123;</span><br><span class="line">       // SimpleDateFormat声明成局部变量</span><br><span class="line">   SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">       //时间增加</span><br><span class="line">       calendar.add(Calendar.DATE, finalI);</span><br><span class="line">       //通过simpleDateFormat把时间转换成字符串</span><br><span class="line">       String dateString = simpleDateFormat.format(calendar.getTime());</span><br><span class="line">       //把字符串放入Set中</span><br><span class="line">       dates.add(dateString);</span><br><span class="line">       //countDown</span><br><span class="line">       countDownLatch.countDown();</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-2-加同步锁"><a href="#3-2-加同步锁" class="headerlink" title="3.2 加同步锁"></a>3.2 加同步锁</h4><p>除了改成局部变量以外，还有一种方法大家可能比较熟悉的，就是对于共享变量进行加锁。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">   //获取当前时间</span><br><span class="line">   Calendar calendar = Calendar.getInstance();</span><br><span class="line">   int finalI = i;</span><br><span class="line">   pool.execute(() -&gt; &#123;</span><br><span class="line">       //时间增加</span><br><span class="line">        calendar.add(Calendar.DATE, finalI);</span><br><span class="line">       //通过simpleDateFormat把时间转换成字符串</span><br><span class="line">       //加锁</span><br><span class="line">        synchronized (simpleDateFormat) &#123;</span><br><span class="line">            String dateString = simpleDateFormat.format(calendar.getTime());</span><br><span class="line">        &#125;</span><br><span class="line">       //把字符串放入Set中</span><br><span class="line">        dates.add(dateString);</span><br><span class="line">       //countDown</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    </span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过加锁，使多个线程排队顺序执行。避免了并发导致的线程安全问题。</p><h4 id="3-3-使用ThreadLocal"><a href="#3-3-使用ThreadLocal" class="headerlink" title="3.3 使用ThreadLocal"></a>3.3 使用ThreadLocal</h4><p>第三种方式，就是使用 ThreadLocal。 ThreadLocal 可以确保每个线程都可以得到单独的一个 SimpleDateFormat 的对象，那么自然也就不存在竞争问题了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 使用ThreadLocal定义一个全局的SimpleDateFormat</span><br><span class="line">*/</span><br><span class="line">private static ThreadLocal&lt;SimpleDateFormat&gt; simpleDateFormatThreadLocal = new ThreadLocal&lt;SimpleDateFormat&gt;() &#123;</span><br><span class="line">   @Override</span><br><span class="line">   protected SimpleDateFormat initialValue() &#123;</span><br><span class="line">       return new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">//用法</span><br><span class="line">String dateString = simpleDateFormatThreadLocal.get().format(calendar.getTime());</span><br></pre></td></tr></table></figure></p><p>当然，以上代码也有改进空间，就是，其实SimpleDateFormat的创建过程可以改为延迟加载。这里就不详细介绍了。</p><h3 id="4-使用DateTimeFormatter"><a href="#4-使用DateTimeFormatter" class="headerlink" title="4. 使用DateTimeFormatter"></a>4. 使用DateTimeFormatter</h3><p>如果是Java8应用，可以使用DateTimeFormatter代替SimpleDateFormat，这是一个线程安全的格式化工具类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//解析日期</span><br><span class="line">String dateStr= &quot;2016年10月25日&quot;;</span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy年MM月dd日&quot;);</span><br><span class="line">LocalDate date= LocalDate.parse(dateStr, formatter);</span><br><span class="line"></span><br><span class="line">//日期转换为字符串</span><br><span class="line">LocalDateTime now = LocalDateTime.now();</span><br><span class="line">DateTimeFormatter format = DateTimeFormatter.ofPattern(&quot;yyyy年MM月dd日 hh:mm a&quot;);</span><br><span class="line">String nowStr = now .format(format);</span><br><span class="line">System.out.println(nowStr);</span><br></pre></td></tr></table></figure></p><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>本文介绍了SimpleDateFormat的用法，SimpleDateFormat主要可以在String和Date之间做转换，还可以将时间转换成不同时区输出。同时提到在并发场景中SimpleDateFormat是不能保证线程安全的，需要开发者自己来保证其安全性。</p><p>主要的几个手段有改为局部变量、使用synchronized加锁、使用Threadlocal为每一个线程单独创建一个和使用Java8中的DateTimeFormatter类代替等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发中我们经常会用到时间相关类，我们有很多办法在Java代码中获取时间。但是不同的方法获取到的时间的格式都不尽相同，这时候就需要一种格式化工具，把时间显示成我们需要的格式。最常用的方法就是使用SimpleDateFormat类。这是一个看上去功能比较简单的类，但是，一旦使用
      
    
    </summary>
    
    
      <category term="源码分析" scheme="http://zzkenyon.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之策略模式</title>
    <link href="http://zzkenyon.github.io/2017/05/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zzkenyon.github.io/2017/05/14/设计模式之策略模式/</id>
    <published>2017-05-14T03:17:23.000Z</published>
    <updated>2019-05-14T05:41:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章以jdk并发包中的一个策略模式实现作为开篇。</p><p>使用线程池处理并发任务时，当用户提交任务到线程池，线程池因为线程池已满或者线程池处于SHUTDOWN状态拒接任务的时候，会调用reject函数对任务进行后处理，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">代码摘自：java.util.concurrent.ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line">private volatile RejectedExecutionHandler handler;</span><br><span class="line">private static final RejectedExecutionHandler defaultHandler =</span><br><span class="line">        new AbortPolicy();</span><br><span class="line">        </span><br><span class="line">final void reject(Runnable command) &#123;</span><br><span class="line">    handler.rejectedExecution(command, this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在线程池创建的时候，用户会初始化handler变量，或者使用默认的初始化defaultHandler，即AbortPolicy对象，AbortPolicy就是策略的一种实现，该策略丢弃被拒绝的任务，并抛出RejectedExecutionException异常。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">代码摘自：java.util.concurrent.ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line">public static class AbortPolicy implements RejectedExecutionHandler &#123;</span><br><span class="line">    public AbortPolicy() &#123; &#125;</span><br><span class="line">    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</span><br><span class="line">        throw new RejectedExecutionException(&quot;Task &quot; + r.toString() +</span><br><span class="line">                                             &quot; rejected from &quot; +</span><br><span class="line">                                             e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>策略接口类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码摘自：java.util.concurrent.RejectedExecutionHandler</span><br><span class="line"></span><br><span class="line">public interface RejectedExecutionHandler &#123;</span><br><span class="line">    void rejectedExecution(Runnable r, ThreadPoolExecutor executor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所有的后处理策略都要实现该接口，ThreadPoolExecutor持有改接口对象，在初始化ThreadPoolExecutor的时候再指定使用哪种策略，下面我们看一下其他策略源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//该策略直接调用被拒绝任务的Run函数强制执行任务</span><br><span class="line">public static class CallerRunsPolicy implements RejectedExecutionHandler &#123;</span><br><span class="line">    public CallerRunsPolicy() &#123; &#125;</span><br><span class="line">    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</span><br><span class="line">        if (!e.isShutdown()) &#123;</span><br><span class="line">            r.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//该策略忽略被拒任务，不做任何处理</span><br><span class="line">public static class DiscardPolicy implements RejectedExecutionHandler &#123;</span><br><span class="line">    public DiscardPolicy() &#123; &#125;</span><br><span class="line">    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//该策略丢弃阻塞队列中等待最久的任务（下一个被执行的任务），再次提交被拒任务</span><br><span class="line">public static class  implements RejectedExecutionHandler &#123;</span><br><span class="line">    public DiscardOldestPolicy() &#123; &#125;</span><br><span class="line">    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</span><br><span class="line">        if (!e.isShutdown()) &#123;</span><br><span class="line">            e.getQueue().poll();</span><br><span class="line">            e.execute(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此我们可以画一个简单的类图表示上述类型之间的关系：<br><img src="http://wx4.sinaimg.cn/large/87c9e458ly1g30nphfgr8j20u20bm0t6.jpg" alt="策略模式"><br>可以说这是一个很典型的策略模式类图了。</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>其思想是针对一组算法，将每一种算法都封装到具有共同接口的独立的类中，从而是它们可以相互替换。策略模式的最大特点是使得算法可以在不影响客户端的情况下发生变化，从而改变不同的功能。  </p><p>下图所示为策略模式的UML图，上文所述的ThreadPoolExecutor就是Context，contextInterface指的就是reject函数。<br><img src="http://wx2.sinaimg.cn/large/87c9e458ly1g30o2l252yj20ly0bfq37.jpg" alt="策略模式111"></p><h4 id="策略模式的优缺点"><a href="#策略模式的优缺点" class="headerlink" title="策略模式的优缺点"></a>策略模式的优缺点</h4><ul><li>优点<ol><li>策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族。恰当使用继承可以把公共的代码转移到父类里面，从而避免重复的代码。</li><li>策略模式提供了可以替换继承关系的办法。继承可以处理多种算法或行为。如果不是用策略模式，那么使用算法或行为的环境类就可能会有一些子类，每一个子类提供一个不同的算法或行为。但是，这样一来算法或行为的使用者就和算法或行为本身混在一起。决定使用哪一种算法或采取哪一种行为的逻辑就和算法或行为的逻辑混合在一起，从而不可能再独立演化。继承使得动态改变算法或行为变得不可能。</li><li>使用策略模式可以避免使用多重条件转移语句。多重转移语句不易维护，它把采取哪一种算法或采取哪一种行为的逻辑与算法或行为的逻辑混合在一起，统统列在一个多重转移语句里面，比使用继承的办法还要原始和落后。</li></ol></li><li>缺点<ol><li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法类。换言之，策略模式只适用于客户端知道所有的算法或行为的情况。</li><li>策略模式造成很多的策略类，每个具体策略类都会产生一个新类。有时候可以通过把依赖于环境的状态保存到客户端里面，而将策略类设计成可共享的，这样策略类实例可以被不同客户端使用。换言之，可以使用享元模式来减少对象的数量。</li></ol></li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>多个类只区别在表现行为不同，可以使用Strategy模式，在运行时动态选择具体要执行的行为。</li><li>需要在不同情况下使用不同的策略(算法)，或者策略还可能在未来用其它方式来实现。</li><li>对客户隐藏具体策略(算法)的实现细节，彼此完全独立。</li></ul><p>参考文档：<br><a href="http://www.w3sdesign.com/strategy_design_pattern.php" target="_blank" rel="noopener">www.w3sdesign.com/strategy_design_pattern.php</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文章以jdk并发包中的一个策略模式实现作为开篇。&lt;/p&gt;
&lt;p&gt;使用线程池处理并发任务时，当用户提交任务到线程池，线程池因为线程池已满或者线程池处于SHUTDOWN状态拒接任务的时候，会调用reject函数对任务进行后处理，代码如下：&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://zzkenyon.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>linux命令-tail</title>
    <link href="http://zzkenyon.github.io/2017/04/23/linux%E5%91%BD%E4%BB%A4-tail/"/>
    <id>http://zzkenyon.github.io/2017/04/23/linux命令-tail/</id>
    <published>2017-04-23T07:52:38.000Z</published>
    <updated>2019-05-23T03:03:01.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>显示文件的末尾部分，默认显示10行</p><p><img src="http://wx4.sinaimg.cn/mw690/87c9e458gy1g2clz9mbgsj20jf0iyjs7.jpg" alt="tail"></p><ul><li>举例：看日志文件时      <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -fn 30 xxxx.log</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;tail&quot;&gt;&lt;a href=&quot;#tail&quot; class=&quot;headerlink&quot; title=&quot;tail&quot;&gt;&lt;/a&gt;tail&lt;/h2&gt;&lt;p&gt;显示文件的末尾部分，默认显示10行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wx4.sinaimg.cn/mw690
      
    
    </summary>
    
    
      <category term="linux命令" scheme="http://zzkenyon.github.io/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>linux命令-nohup</title>
    <link href="http://zzkenyon.github.io/2017/04/23/linux%E5%91%BD%E4%BB%A4-nohup/"/>
    <id>http://zzkenyon.github.io/2017/04/23/linux命令-nohup/</id>
    <published>2017-04-23T07:39:40.000Z</published>
    <updated>2019-05-23T03:03:26.891Z</updated>
    
    <content type="html"><![CDATA[<p>nohup 是 no hang up 的缩写，就是不挂断的意思。  </p><p>nohup命令：如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以   使用nohup命令,该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。</p><p>在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中。nohup 命令运行由 Command参数和任何相关的Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; （表示“and”的符号）到命令的尾部。  </p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h5 id="1-nohup-command-gt-myout-file-2-gt-amp-1-amp"><a href="#1-nohup-command-gt-myout-file-2-gt-amp-1-amp" class="headerlink" title="1. nohup command &gt; myout.file 2&gt;&amp;1 &amp;"></a>1. nohup command &gt; myout.file 2&gt;&amp;1 &amp;</h5><p>在上面的例子中，0 – stdin (standard input)，1 – stdout (standard output)，2 – stderr (standard error) ；<br>2&gt;&amp;1是将标准错误（2）重定向到标准输出（&amp;1），标准输出（&amp;1）再被重定向输入到myout.file文件中。</p><h5 id="2-0-22-usr-bin-python-home-pu-download-pdf-download-dfcf-pdf-to-oss-py-gt-home-pu-download-pdf-download-dfcf-pdf-to-oss-log-2-gt-amp-1"><a href="#2-0-22-usr-bin-python-home-pu-download-pdf-download-dfcf-pdf-to-oss-py-gt-home-pu-download-pdf-download-dfcf-pdf-to-oss-log-2-gt-amp-1" class="headerlink" title="2. 0 22   * /usr/bin/python /home/pu/download_pdf/download_dfcf_pdf_to_oss.py &gt; /home/pu/download_pdf/download_dfcf_pdf_to_oss.log 2&gt;&amp;1"></a>2. 0 22 <em> </em> * /usr/bin/python /home/pu/download_pdf/download_dfcf_pdf_to_oss.py &gt; /home/pu/download_pdf/download_dfcf_pdf_to_oss.log 2&gt;&amp;1</h5><p>这是放在crontab中的定时任务，晚上22点时候怕这个任务，启动这个python的脚本，并把日志写在download_dfcf_pdf_to_oss.log文件中</p><h3 id="nohup和-amp-的区别"><a href="#nohup和-amp-的区别" class="headerlink" title="nohup和&amp;的区别"></a>nohup和&amp;的区别</h3><p>&amp; ： 指在后台运行<br>nohup ： 不挂断的运行，注意并没有后台运行的功能，就是指用nohup运行命令可以使命令永久的执行下去，和用户终端没有关系，例如我们断开SSH连接都不会影响他的运行</p><h3 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h3><ol><li><strong>sh test.sh &amp;</strong><br>将sh test.sh任务放到后台 ，关闭xshell，对应的任务也跟着停止。</li><li><strong>nohup sh test.sh</strong><br>将sh test.sh任务放到后台，关闭标准输入，终端不再能够接收任何输入（标准输入），重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前session依然继续运行。</li><li><strong>nohup sh test.sh  &amp;</strong><br>将sh test.sh任务放到后台，但是依然可以使用标准输入，终端能够接收任何输入，重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前session依然继续运行。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nohup 是 no hang up 的缩写，就是不挂断的意思。  &lt;/p&gt;
&lt;p&gt;nohup命令：如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以   使用nohup命令,该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。&lt;/p&gt;
&lt;p&gt;在缺
      
    
    </summary>
    
    
      <category term="linux命令" scheme="http://zzkenyon.github.io/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>postgreSQL 让主键自增</title>
    <link href="http://zzkenyon.github.io/2017/03/21/%E6%95%B0%E6%8D%AE%E5%BA%93-postgreSQL-%E8%AE%A9%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E/"/>
    <id>http://zzkenyon.github.io/2017/03/21/数据库-postgreSQL-让主键自增/</id>
    <published>2017-03-21T01:48:56.000Z</published>
    <updated>2019-04-25T08:55:20.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-建表时创建"><a href="#1-建表时创建" class="headerlink" title="1.建表时创建"></a>1.建表时创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test</span><br><span class="line">(  </span><br><span class="line">  test_id SERIAL primary key ,  </span><br><span class="line">  test_name character varying,  </span><br><span class="line">  contactname character varying,  </span><br><span class="line">  phone character varying,  </span><br><span class="line">  country character varying  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="2-在已建表的情况下创建"><a href="#2-在已建表的情况下创建" class="headerlink" title="2.在已建表的情况下创建"></a>2.在已建表的情况下创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE SEQUENCE test_id_seq  </span><br><span class="line">START WITH 1  </span><br><span class="line">INCREMENT BY 1  </span><br><span class="line">NO MINVALUE  </span><br><span class="line">NO MAXVALUE  </span><br><span class="line">CACHE 1;  </span><br><span class="line">  </span><br><span class="line">alter table test alter column id set default nextval(&apos;test_id_seq&apos;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-建表时创建&quot;&gt;&lt;a href=&quot;#1-建表时创建&quot; class=&quot;headerlink&quot; title=&quot;1.建表时创建&quot;&gt;&lt;/a&gt;1.建表时创建&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://zzkenyon.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>java编程-移位操作符</title>
    <link href="http://zzkenyon.github.io/2016/12/23/Java%E7%BC%96%E7%A8%8B-%E7%A7%BB%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>http://zzkenyon.github.io/2016/12/23/Java编程-移位操作符/</id>
    <published>2016-12-23T13:00:45.000Z</published>
    <updated>2019-05-23T02:57:03.740Z</updated>
    
    <content type="html"><![CDATA[<p>在java代码优化时一般会遵循一个原则， 尽量使用移位来代替’a/b’和’a*b’的操作，这两个操作代价很高，使用移位操作将会更快更有效。</p><h3 id="1、三种移位操作"><a href="#1、三种移位操作" class="headerlink" title="1、三种移位操作"></a>1、三种移位操作</h3><ul><li>“&lt;&lt;” 不带符号左移，符号位不动，低位补0，高位丢失</li><li>“&gt;&gt;” 不带符号右移，符号位不动，正数高位补0，负数高位补1(机器数为补码)，低位丢失</li><li>“&gt;&gt;&gt;” 带符号右移，高位补0，低位丢失</li></ul><h3 id="2、五种左操作数类型"><a href="#2、五种左操作数类型" class="headerlink" title="2、五种左操作数类型"></a>2、五种左操作数类型</h3><p>左操作数有五种：long, int, short, byte, char</p><ol><li>int 移位时左操作数是32位的，此时移位操作作用到32bit上</li><li>long 移位时做操作数是64位的，此时移位操作作用到32bit上</li><li>short  byte  char  在移位之前先将左操作数转换成int，然后在32bit上进行移位最终得到一个int类型，所以用&gt;&gt;=,&gt;&gt;&gt;=, &lt;&lt;= 其实是将得到的int做低位截取得到的数值，这里往往容易犯错。</li></ol><h3 id="3、右操作数有坑"><a href="#3、右操作数有坑" class="headerlink" title="3、右操作数有坑"></a>3、右操作数有坑</h3><ul><li>如果左操作数（转换之后的）是int,那么右操作数只有低5位有效，因为int只有32位，低5位最多可以移动31位</li><li>如果左边操作数是long，那么右边操作数只有低6位有效，同理</li></ul><h3 id="4、移位操作是对补码进行的"><a href="#4、移位操作是对补码进行的" class="headerlink" title="4、移位操作是对补码进行的"></a>4、移位操作是对补码进行的</h3><ul><li>正数的 补码 = 原码</li><li>负数的 补码 = 反码 + 1</li><li>补码的补码等于原码</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在java代码优化时一般会遵循一个原则， 尽量使用移位来代替’a/b’和’a*b’的操作，这两个操作代价很高，使用移位操作将会更快更有效。&lt;/p&gt;
&lt;h3 id=&quot;1、三种移位操作&quot;&gt;&lt;a href=&quot;#1、三种移位操作&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="java编程" scheme="http://zzkenyon.github.io/tags/java%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之代理模式</title>
    <link href="http://zzkenyon.github.io/2016/08/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zzkenyon.github.io/2016/08/19/设计模式之代理模式/</id>
    <published>2016-08-19T13:23:12.000Z</published>
    <updated>2019-05-17T04:52:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>代理模式提供了目标对象另外的访问方式，在不修改目标类型的基础上对目标类型进行扩展，符合设计模式中遵循的开闭原则，对扩展开放，对修改关闭。</p><h3 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1. 静态代理"></a>1. 静态代理</h3><p>静态代理在使用时需要定义接口或者超类，被代理对象与代理对象一起实现同一个接口或者是继承同一个超类。</p><p>下面举个例子说明：<br>我们在购买火车票时可以到火车站购买，也可到各个代售点购买，火车站就是目标对象，代售点即是代理对象，他们都能完成购票，最主要的是代售点使用的售票接口就是车站官方的售票接口。</p><p>票务接口 TicketService.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface TicketService&#123;</span><br><span class="line">    void buyTicket();</span><br><span class="line">    void refund();//退票</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>目标对象车站 Station.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Station implement TicketService&#123;</span><br><span class="line">    public void buyTicket()&#123;</span><br><span class="line">        System.out.println(&quot;----买票-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void refund()&#123;</span><br><span class="line">        System.out.println(&quot;----退票----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代理对象代售处 Agency.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Agency implement TicketService&#123;</span><br><span class="line">    private Station station;</span><br><span class="line">    public void buyTicket()&#123;</span><br><span class="line">        System.out.println(&quot;----这里是代售点-----&quot;);</span><br><span class="line">        station.buyTicket();</span><br><span class="line">    &#125;</span><br><span class="line">    public void refund()&#123;</span><br><span class="line">        System.out.println(&quot;----代售点不支持退票----&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>静态代理可以在不修改目标对象的前提下对目标扩展，但也存在缺点。</p><p>因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类,类太多；此外，一旦接口增加方法,目标对象与代理对象都要维护。<br>那么如何解决这些缺点呢，JDK中给出了动态代理的解决方案。</p><h3 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2. 动态代理"></a>2. 动态代理</h3><p>动态代理又叫做JDK代理，接口代理</p><p>动态代理的特点：</p><ol><li>代理对象不需要实现接口</li><li>代理对象的生成，是利用JDK中的api，动态的在内存中构建代理对象（需要我们指定创建代理对象/目标对象实现的接口类型）</li></ol><p>JDK中生成代理对象的API代理类所在包:java.lang.reflect.Proxy<br>JDK实现代理只需要使用newProxyInstance方法，但是该方法需要接收三个参数，完整的写法是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler h )</span><br></pre></td></tr></table></figure></p><p>注意该方法是在Proxy类中是静态方法,且接收的三个参数依次为:</p><ul><li>ClassLoader loader：指定当前目标对象使用类加载器,获取加载器的方法是固定的</li><li>Class&lt;?&gt;[] interfaces：目标对象实现的接口的类型,使用泛型方式确认类型</li><li>InvocationHandler h：事件处理,执行目标对象的方法时，会触发事件处理器的方法，会把当前执行目标对象的方法作为参数传入。</li></ul><p>代码示例:<br>接口类 TicketService.java以及接口实现类,目标对象Station是一样的，没有做修改。在这个基础上，增加一个代理工厂类(ProxyFactory.java)，将代理类写在这个地方，然后在测试类(需要使用到代理的代码)中先建立目标对象和代理对象的联系，然后代用代理对象的中同名方法<br>代理工厂类:ProxyFactory.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class ProxyFactory&#123;</span><br><span class="line"></span><br><span class="line">    //维护一个目标对象</span><br><span class="line">    private Object target;</span><br><span class="line">    public ProxyFactory(Object target)&#123;</span><br><span class="line">        this.target=target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   //给目标对象生成代理对象</span><br><span class="line">    public Object getProxyInstance()&#123;</span><br><span class="line">        return Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                new InvocationHandler() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">                        System.out.println(&quot;--这是代售点购票系统--&quot;);</span><br><span class="line">                        //执行目标对象方法</span><br><span class="line">                        Object returnValue = method.invoke(target, args);</span><br><span class="line">                        return returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:DynamicProxyTest.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class DynamicProxyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 目标对象</span><br><span class="line">        TicketService target = new Station();</span><br><span class="line">        System.out.println(target.getClass());</span><br><span class="line">        // 创建代理对象</span><br><span class="line">        TicketService proxy = (TicketService) new ProxyFactory(target).getProxyInstance();</span><br><span class="line">        System.out.println(proxy.getClass());</span><br><span class="line">        // 代理对象执行方法</span><br><span class="line">        proxy.buyTicket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结：代理对象不需要实现接口，但是目标对象一定要实现接口，否则不能用动态代理。</p><h3 id="3-Cglib代理"><a href="#3-Cglib代理" class="headerlink" title="3. Cglib代理"></a>3. Cglib代理</h3><p>上面的静态代理和动态代理模式都是要求目标对象是实现一个接口的目标对象，但是有时候目标对象只是一个单独的对象,并没有实现任何的接口，这个时候就可以使用以目标对象子类的方式类实现代理，这种方法就叫做:Cglib代理</p><p>Cglib代理，也叫作子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能的扩展。</p><ul><li>JDK的动态代理有一个限制，就是使用动态代理的对象必须实现一个或多个接口，如果想代理没有实现接口的类,就可以使用Cglib实现。</li><li>Cglib是一个强大的高性能的代码生成包，它可以在运行期扩展java类与实现java接口。它广泛的被许多AOP的框架使用，例如Spring AOP和synaop，为他们提供方法的interception(拦截)。</li><li>Cglib包的底层是通过使用一个小而块的字节码处理框架ASM来转换字节码并生成新的类。不鼓励直接使用ASM,因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉。  </li></ul><p>Cglib子类代理实现方法:</p><ol><li>需要引入cglib的jar文件，但是Spring的核心包中已经包括了Cglib功能,所以直接引入pring-core-3.2.5.jar即可。</li><li>引入功能包后，就可以在内存中动态构建子类</li><li>代理的类不能为final，否则报错</li><li>目标对象的方法如果为final/stati，那么就不会被拦截，即不会执行目标对象额外的业务方法。</li></ol><p>代码示例:<br>目标对象类 Station.java ，目标对象,没有实现任何接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Station &#123;</span><br><span class="line"></span><br><span class="line">    public void buyTicket() &#123;</span><br><span class="line">        System.out.println(&quot;----买票----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Cglib代理工厂 ProxyFactory.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class ProxyFactory implements MethodInterceptor&#123;</span><br><span class="line">    private Object target;</span><br><span class="line">    public ProxyFactory(Object target) &#123;</span><br><span class="line">        this.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //给目标对象创建一个代理对象</span><br><span class="line">    public Object getProxyInstance()&#123;</span><br><span class="line">        //1.工具类</span><br><span class="line">        Enhancer en = new Enhancer();</span><br><span class="line">        //2.设置父类</span><br><span class="line">        en.setSuperclass(target.getClass());</span><br><span class="line">        //3.设置回调函数</span><br><span class="line">        en.setCallback(this);</span><br><span class="line">        //4.创建子类(代理对象)</span><br><span class="line">        return en.create();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;--这是代售点购票系统--&quot;);</span><br><span class="line">        //执行目标对象的方法</span><br><span class="line">        Object returnValue = method.invoke(target, args);</span><br><span class="line">        return returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class CglibProxyTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        //目标对象</span><br><span class="line">        Station target = new Station();</span><br><span class="line">        //代理对象</span><br><span class="line">        Station proxy = (Station)new ProxyFactory(target).getProxyInstance();</span><br><span class="line">        //执行代理对象的方法</span><br><span class="line">        proxy.buyTicket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Spring的AOP编程中:<br>如果加入容器的目标对象有实现接口，用JDK代理<br>如果目标对象没有实现接口，用Cglib代理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代理模式提供了目标对象另外的访问方式，在不修改目标类型的基础上对目标类型进行扩展，符合设计模式中遵循的开闭原则，对扩展开放，对修改关闭。&lt;/p&gt;
&lt;h3 id=&quot;1-静态代理&quot;&gt;&lt;a href=&quot;#1-静态代理&quot; class=&quot;headerlink&quot; title=&quot;1. 静
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://zzkenyon.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例模式</title>
    <link href="http://zzkenyon.github.io/2016/08/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zzkenyon.github.io/2016/08/04/设计模式之单例模式/</id>
    <published>2016-08-04T07:15:31.000Z</published>
    <updated>2019-04-25T07:16:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。</p><h3 id="1、什么是单例"><a href="#1、什么是单例" class="headerlink" title="1、什么是单例"></a>1、什么是单例</h3><h4 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h4><p>单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。</p><h4 id="1-2-实现思路"><a href="#1-2-实现思路" class="headerlink" title="1.2 实现思路"></a>1.2 实现思路</h4><p>面向对象编程中，我们通过类的构造器生成对象，只要内存足够就可以构造出很多个实例，所以要限制某个类型只有唯一的一个实例对象，那就要从构造函数着手。  </p><ol><li>需要声明一个能返回对象的引用，定义一个获得该对象引用的方法（必须是静态方法，通常使用getInstance这个名称)  </li><li>当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用  </li><li>最后将该类的构造函数定义为私有方法  </li></ol><h3 id="2、懒汉式单例"><a href="#2、懒汉式单例" class="headerlink" title="2、懒汉式单例"></a>2、懒汉式单例</h3><p>按照以上的实现思路，实现出第一个单例类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance;       //引用</span><br><span class="line">    private Singleton ()&#123;&#125;                   //私有构造器</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance() &#123;  //静态方法</span><br><span class="line">        if (instance == null) &#123;  </span><br><span class="line">            instance = new Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种实现方式称为懒汉式，所谓懒汉，指的是只有在需要对象的时候才生成。</p><h4 id="2-1-单例的线程安全"><a href="#2-1-单例的线程安全" class="headerlink" title="2.1 单例的线程安全"></a>2.1 单例的线程安全</h4><p>单例的线程安全是指在并发环境中，不同的线程拿到的单例对象也必须保证是同一个实例。  </p><p>上文实现的单例类型是线程不安全的，如果有两个线程同时执行到 if (instance == null) 这行代码，判断都通过，然后各自执行 new 语句并各自返回一个实例，这时候就产生了多个对象。</p><p>解决方法有两种：</p><ul><li>给getInstance方法加互斥锁(<strong>不推荐使用</strong>)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static synchronized Singleton getInstance() &#123;  </span><br><span class="line">        if (instance == null) &#123;  </span><br><span class="line">            instance = new Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低要改进。</p><ul><li>双重检验锁（<strong>推荐使用</strong>）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private volatile static Singleton singleton;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static Singleton getSingleton() &#123;  </span><br><span class="line">        if (singleton == null) &#123;  </span><br><span class="line">            synchronized (Singleton.class) &#123;  </span><br><span class="line">                if (singleton == null) &#123;  </span><br><span class="line">                    singleton = new Singleton();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Double-Check概念对于多线程开发者来说不会陌生，如代码中所示，我们进行了两次if (singleton == null)检查,这样实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)，直接return实例化对象。</p><p>还有值得注意的是，双重校验锁的实现方式中，静态成员变量singleton必须通过volatile来修饰，保证其初始化的原子性，否则可能被引用到一个未初始化完成的对象。</p><h3 id="3、饿汉式单例"><a href="#3、饿汉式单例" class="headerlink" title="3、饿汉式单例"></a>3、饿汉式单例</h3><p>前面提到的懒汉模式，其实是一种lazy-loading思想的实践，这种实现有一个比较大的好处，就是只有真正用到的时候才创建，如果没被使用到，就一直不会被创建，这就避免了不必要的开销。</p><p>但是这种做法，其实也有一个小缺点，就是第一次使用的时候，需要进行初始化操作，可能会有比较高的耗时。如果是已知某一个对象一定会使用到的话，其实可以采用一种饿汉的实现方式。所谓饿汉，就是事先准备好，需要的时候直接给你就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance = new Singleton();  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">public class Singleton &#123;  </span><br><span class="line">    private Singleton instance = null;  </span><br><span class="line">    static &#123;  </span><br><span class="line">        instance = new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">        return this.instance;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以上两段代码都是通过定义静态的成员变量（懒汉式只有声明没有定义）。饿汉模式中的静态变量是随着类加载时被完成实例化的。饿汉变种中的静态代码块也会随着类的加载一块执行。</p><p>因为类的初始化是由ClassLoader完成的，这其实是利用了ClassLoader的线程安全机制。ClassLoader的loadClass方法在加载类的时候使用了synchronized关键字。也正是因为这样， 除非被重写，这个方法默认在整个装载过程中都是同步的（线程安全的）</p><p>除了以上两种饿汉方式，还有一种实现方式也是借助了calss的初始化来实现的，那就是通过静态内部类来实现的单例（<strong>推荐使用</strong>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static class SingletonHolder &#123;  </span><br><span class="line">        private static final Singleton INSTANCE = new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static final Singleton getInstance() &#123;  </span><br><span class="line">        return SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面提到的饿汉模式，只要Singleton类被装载了，那么instance就会被实例化。</p><p>而这种方式是Singleton类被装载了，instance不一定被初始化。因为SingletonHolder类没有被主动使用，只有显示通过调用getInstance方法时，才会显示装载SingletonHolder类，从而实例化instance。</p><p>使用静态内部类，借助了classloader来实现了线程安全，这与饿汉模式有着异曲同工之妙，但是他有兼顾了懒汉模式的lazy-loading功能，相比较之下，有很大优势。</p><h3 id="4、枚举式单例"><a href="#4、枚举式单例" class="headerlink" title="4、枚举式单例"></a>4、枚举式单例</h3><p>Joshua Bloch大神在《Effective Java》中明确表达过的观点：</p><blockquote><p>使用枚举实现单例的方法虽然还没有广泛采用，但是单元素的枚举类型已经成为实现Singleton的最佳方法。  </p></blockquote><p>枚举单例：（<strong>墙裂推荐</strong>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public enum Singleton &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    public void whateverMethod() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>最精简的</li><li>线程安全的</li><li>可解决反序列化破坏单例的问题</li></ul><h3 id="5、应用场景"><a href="#5、应用场景" class="headerlink" title="5、应用场景"></a>5、应用场景</h3><ul><li>Windows的Task Manager（任务管理器）就是很典型的单例模式</li><li>windows的Recycle Bin（回收站）也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。</li><li>操作系统的文件系统，也是大的单例模式实现的具体例子，一个操作系统只能有一个文件系统。</li><li>网站的计数器，一般也是采用单例模式实现，否则难以同步。</li><li>应用程序的日志应用，一般都何用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加。</li><li>Web应用的配置对象的读取，一般也应用单例模式，这个是由于配置文件是共享的资源。</li><li>数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库资源。数据库软件系统中使用数据库连接池，主要是节省打开或者关闭数据库连接所引起的效率损耗，这种效率上的损耗还是非常昂贵的，用单例模式来维护，就可以大大降低这种损耗。</li><li>多线程的线程池的设计一般也是采用单例模式，这是由于线程池要方便对池中的线程进行控制。</li><li>HttpApplication 也是单例的典型应用。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。&lt;/
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://zzkenyon.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之建造者模式</title>
    <link href="http://zzkenyon.github.io/2016/08/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zzkenyon.github.io/2016/08/02/设计模式之建造者模式/</id>
    <published>2016-08-02T05:35:36.000Z</published>
    <updated>2019-04-24T08:30:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>静态工厂和构造器有一个共同的局限性：不能很好的扩展到大量的可选参数。对于初始化参数很多的类，常规的做法是使用重载构造器，但是当参数很多的时候，客户端代码会很难写，并且较难阅读。  </p><p>这时，还有另外一种替代方案，使用javaBean模式，在这种模式下先默认构造器创建对象，然后用setter方法设置需要的参数。遗憾的是，JavaBean模式自身有着很严重的缺点，因为构造过程分成了好几个调用，在构造过程中JavaBean可能处于不一致的状态，类无法仅仅通过检查构造器参数的有效性来保证一致性。</p><p>最终还有第三种替代方案，既能确保安全性，也能保证可读性，那就是建造者模式。</p><h3 id="1-建造者模式"><a href="#1-建造者模式" class="headerlink" title="1. 建造者模式"></a>1. 建造者模式</h3><p>直接看一个简单例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    private final String name;</span><br><span class="line">    private final String address;</span><br><span class="line">    private final int age;</span><br><span class="line">    private final int sex;</span><br><span class="line">    private final String tel;</span><br><span class="line"></span><br><span class="line">    public static class Builder &#123;</span><br><span class="line">        //Required parameters</span><br><span class="line">        private final String name;</span><br><span class="line">        private final int age;</span><br><span class="line">        private final int sex;</span><br><span class="line">        //Optional parameters</span><br><span class="line">        private String address = &quot;浙江杭州&quot;;</span><br><span class="line">        private String tel = &quot;0571&quot;;</span><br><span class="line"></span><br><span class="line">        public Builder(String name, int age, int sex) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.age = age;</span><br><span class="line">            this.sex = sex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Builder address(String address) &#123;</span><br><span class="line">            this.address = address;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Builder tel(String tel) &#123;</span><br><span class="line">            this.tel = tel;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Person build()&#123;</span><br><span class="line">            return new Person(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private Person(Builder builder)&#123;</span><br><span class="line">        name = builder.name;</span><br><span class="line">        address = builder.address;</span><br><span class="line">        sex = builder.sex;</span><br><span class="line">        age = builder.age;</span><br><span class="line">        tel = builder.tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Person p = new Builder(&quot;zhaozhengkang&quot;,25,1).address(&quot;yuhang&quot;).tel(&quot;123456789&quot;).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>builder的设值方法返回builder本身，以便把调用连接起来形成一个流式的API.</p><h3 id="2-类层次中使用建造者模式-（effective-java-rule2-30）"><a href="#2-类层次中使用建造者模式-（effective-java-rule2-30）" class="headerlink" title="2. 类层次中使用建造者模式 （effective java rule2,30）"></a>2. 类层次中使用建造者模式 （effective java rule2,30）</h3><p>使用平行层次结构的builder时，各自嵌套在相应类中。抽象类有抽象类的builder，具体类有具体类的builder。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Pizza &#123;</span><br><span class="line">    public enum Topping &#123;</span><br><span class="line">        HAM, MUSHROOM, ONION, PEPPER, SAUSAGE</span><br><span class="line">    &#125;</span><br><span class="line">    final Set&lt;Topping&gt; toppings;</span><br><span class="line"></span><br><span class="line">    abstract static class Builder&lt;T extends Builder&lt;T&gt;&gt;&#123;</span><br><span class="line">        EnumSet&lt;Topping&gt; toppings = EnumSet.noneOf(Topping.class);</span><br><span class="line">        public T addTopping(Topping topping)&#123;</span><br><span class="line">            toppings.add(Objects.requireNonNull(topping));</span><br><span class="line">            return self();</span><br><span class="line">        &#125;</span><br><span class="line">        abstract Pizza build();</span><br><span class="line">        protected abstract T self();</span><br><span class="line">    &#125;</span><br><span class="line">    Pizza(Builder&lt;?&gt; builder)&#123;</span><br><span class="line">        toppings = builder.toppings.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Builder&lt;T extends Builder<t>&gt;这一句使用了<strong>递归类型限制</strong>中的<strong>模拟自类型</strong><br>模拟自类型（自限定类型）所做的就是要求在继承关系中，强制要求将正在定义的类当做参数传递给基类，看下面代码：</t></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class NyPizza extends Pizza &#123;</span><br><span class="line">    public  enum  Size&#123;SMALL, MEDIUM, LARGER&#125;</span><br><span class="line">    private final Size size;</span><br><span class="line">    public static class NyPizzaBuilder extends Pizza.Builder&lt;NyPizzaBuilder&gt;&#123;</span><br><span class="line">        private final Size size;</span><br><span class="line">        public NyPizzaBuilder(Size size)&#123;</span><br><span class="line">            this.size = Objects.requireNonNull(size);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public NyPizza build() &#123;</span><br><span class="line">            return new NyPizza(this);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        protected NyPizzaBuilder self() &#123;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private NyPizza(NyPizzaBuilder builder) &#123;</span><br><span class="line">        super(builder);</span><br><span class="line">        size = builder.size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        NyPizza p = new NyPizzaBuilder(Size.SMALL).addTopping(Topping.SAUSAGE).addTopping(Topping.ONION).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承时，必须将正在定义的类NyPizzaBuilder作为类型参数传给基类Pizza.Builder<nypizzabuilder>，否则无法编译。<br>自限定类型属于泛型知识，将另开一篇进行研究。</nypizzabuilder></p><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>《Effcitive Java》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;静态工厂和构造器有一个共同的局限性：不能很好的扩展到大量的可选参数。对于初始化参数很多的类，常规的做法是使用重载构造器，但是当参数很多的时候，客户端代码会很难写，并且较难阅读。  &lt;/p&gt;
&lt;p&gt;这时，还有另外一种替代方案，使用javaBean模式，在这种模式下先默认构造器
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://zzkenyon.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之工厂模式</title>
    <link href="http://zzkenyon.github.io/2016/08/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zzkenyon.github.io/2016/08/01/设计模式之工厂模式/</id>
    <published>2016-08-01T05:35:36.000Z</published>
    <updated>2019-04-24T08:34:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-简单工厂"><a href="#1-简单工厂" class="headerlink" title="1. 简单工厂"></a>1. 简单工厂</h3><p>根据客户端传入的参数进行判断，再决定创建哪种实例，缺点很明显：</p><ul><li>传参错误则不能创建正确的实例</li><li>扩展需要修改工厂方法</li></ul><h3 id="2-工厂方法"><a href="#2-工厂方法" class="headerlink" title="2.工厂方法"></a>2.工厂方法</h3><p>在工厂类中定义若干的函数来创建实例，每个函数创建一种实例，解决的简单工厂需要传参的问题</p><h3 id="3-静态工厂方法"><a href="#3-静态工厂方法" class="headerlink" title="3. 静态工厂方法"></a>3. 静态工厂方法</h3><h4 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h4><p>将工厂类中的工厂方法定义为静态类型，使用静态工厂不需要创建工厂实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class SendFactory &#123;  </span><br><span class="line">    </span><br><span class="line">  public static Sender produceMail()&#123;  </span><br><span class="line">      return new MailSender();  </span><br><span class="line">  &#125;  </span><br><span class="line">    </span><br><span class="line">  public static Sender produceSms()&#123;  </span><br><span class="line">      return new SmsSender();  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">public class FactoryTest &#123;  </span><br><span class="line"></span><br><span class="line">  public static void main(String[] args) &#123;      </span><br><span class="line">      Sender sender = SendFactory.produceMail();  </span><br><span class="line">      sender.Send();  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（静态）工厂方法缺点是：</p><ul><li>对于扩展需要修改工厂类  </li></ul><h4 id="3-2-用静态工厂方法代替构造器（Effective-java：rule-1）"><a href="#3-2-用静态工厂方法代替构造器（Effective-java：rule-1）" class="headerlink" title="3.2 用静态工厂方法代替构造器（Effective java：rule 1）"></a>3.2 用静态工厂方法代替构造器（Effective java：rule 1）</h4><p>如果不通过共有构造器，或者说除了公有构造器之外，类还可以给他的客户端提供静态工厂方法，这样做既有优势又有劣势。<br>优势在于：  </p><ul><li>第一点：它们有名称。使客户端代码更容易阅读，例如：构造器BigInteger(int,int,Random)返回的BigInteger可能是素数，如果用静态工厂方法BigInteger.probablePrime来表示，就会更清楚。</li><li>第二点：不必每次调用的时候都创建一个新对象。静态工厂方法能够为重复的调用返回相同的对象</li><li>第三点：静态工厂方法可以返回类型的任何子类型对象，构造器则做不到这一点。</li><li>第四点：每次调用返回对象的类可以变化，取决于静态工厂方法的参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//该代码 解释以上四点优势</span><br><span class="line">public class Child &#123;</span><br><span class="line">    protected String classId;</span><br><span class="line">    public Child()&#123;</span><br><span class="line">        classId = &quot;CHILD&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public static class Son extends Child &#123;</span><br><span class="line">        public Son()&#123; classId = &quot;SON&quot;; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static class Daughter extends Child &#123;</span><br><span class="line">        public Daughter()&#123; classId = &quot;DAUGHTER&quot;; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Child sonFactory()&#123;</span><br><span class="line">        return new Son();</span><br><span class="line">    &#125;</span><br><span class="line">    public static Child daughterFactory()&#123;</span><br><span class="line">        return new Daughter();</span><br><span class="line">    &#125;</span><br><span class="line">    public static Child childFactory(int sex)&#123;</span><br><span class="line">        return sex == 1 ? new Son() : new Daughter();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Child son = Child.sonFactory();</span><br><span class="line">        Child child = Child.childFactory(2);</span><br><span class="line">        System.out.println(son.classId + &quot;\n&quot; + child.classId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第五点：方法返回对象的类，在编写包含该静态方法的类时是可以不存在的。<br>第五点的灵活性是构成服务提供者框架（Service Provider Framework）的基础，将另起一片单独研究。</li></ul><p>静态工厂方法的劣势在于：</p><ul><li>程序员很难发现这些静态工厂方法。</li><li>类如果没有公有或者受保护的构造器，就不能被子类化（不允许被继承）。</li></ul><h3 id="4-抽象工厂"><a href="#4-抽象工厂" class="headerlink" title="4.抽象工厂"></a>4.抽象工厂</h3><p>对每一个需要创建实例的类都配置了一个工厂类，需要扩展的时候，增加一个工厂类，实现工厂类的抽象方法进行实例创建，实现了开闭原则。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-简单工厂&quot;&gt;&lt;a href=&quot;#1-简单工厂&quot; class=&quot;headerlink&quot; title=&quot;1. 简单工厂&quot;&gt;&lt;/a&gt;1. 简单工厂&lt;/h3&gt;&lt;p&gt;根据客户端传入的参数进行判断，再决定创建哪种实例，缺点很明显：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传参错误则不能
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://zzkenyon.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>转载Log4j 配置文件解析</title>
    <link href="http://zzkenyon.github.io/2016/07/23/%E8%BD%AC%E8%BD%BD-Log4j-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <id>http://zzkenyon.github.io/2016/07/23/转载-Log4j-配置文件解析/</id>
    <published>2016-07-23T07:39:40.000Z</published>
    <updated>2019-05-23T03:01:35.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>Log4j有三个主要的组件：</p><ul><li>Loggers(记录器):日志类别和级别;</li><li>Appenders (输出源):日志要输出的地方;</li><li>Layouts(布局):日志以何种形式输出</li></ul><h4 id="1-1、Loggers"><a href="#1-1、Loggers" class="headerlink" title="1.1、Loggers"></a>1.1、Loggers</h4><ul><li>Loggers组件在此系统中被分为五个级别,分别用来指定这条日志信息的重要程度：DEBUG、INFO、WARN、ERROR和FATAL;    </li><li>这五个级别是有顺序的，DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL;   </li><li>Log4j有一个规则：只输出级别不低于设定级别的日志信息，假设Loggers级别设定为INFO，则INFO、WARN、ERROR和FATAL级别的日志信息都会输出，而级别比INFO低的DEBUG则不会输出。</li></ul><h4 id="1-2、Appenders"><a href="#1-2、Appenders" class="headerlink" title="1.2、Appenders"></a>1.2、Appenders</h4><p>禁用和使用日志请求只是Log4j的基本功能，Log4j日志系统还提供许多强大的功能，比如允许把日志输出到不同的地方，如控制台（Console）、文件（Files）等，可以根据天数或者文件大小产生新的文件，可以以流的形式发送到其它地方等等。 </p><p>常使用的类如下：</p><ul><li>org.apache.log4j.ConsoleAppender（控制台）</li><li>org.apache.log4j.FileAppender（文件）</li><li>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</li><li>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</li><li>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</li></ul><p>配置模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.appender.appenderName = className</span><br><span class="line">log4j.appender.appenderName.Option1 = value1</span><br><span class="line">…</span><br><span class="line">log4j.appender.appenderName.OptionN = valueN</span><br></pre></td></tr></table></figure></p><h4 id="1-3、Layouts"><a href="#1-3、Layouts" class="headerlink" title="1.3、Layouts"></a>1.3、Layouts</h4><p>Log4j可以在Appenders的后面附加Layouts来完成这个功能。<br>Layouts提供四种日志输出样式，如根据HTML样式、自由指定样式、包含日志级别与信息的样式和包含日志时间、线程、类别等信息的样式。</p><p>常使用的类如下：</p><ul><li>org.apache.log4j.HTMLLayout（以HTML表格形式布局）</li><li>org.apache.log4j.PatternLayout（可以灵活地指定布局模式）</li><li>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</li><li>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等信息）</li></ul><p>配置模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.appender.appenderName.layout =className</span><br><span class="line">log4j.appender.appenderName.layout.Option1 = value1</span><br><span class="line">...</span><br><span class="line">log4j.appender.appenderName.layout.OptionN = valueN</span><br></pre></td></tr></table></figure><h2 id="2、配置详解"><a href="#2、配置详解" class="headerlink" title="2、配置详解"></a>2、配置详解</h2><p>在实际应用中，要使Log4j在系统中运行须事先设定配置文件。配置文件事实上也就是对Logger、Appender及Layout进行相应设定。<br>Log4j支持两种配置文件格式:</p><ul><li>一种是XML格式的文件，</li><li>一种是properties属性文件。</li></ul><p>下面以properties属性文件为例介绍log4j.properties的配置。</p><h4 id="2-1、配置根Logger"><a href="#2-1、配置根Logger" class="headerlink" title="2.1、配置根Logger"></a>2.1、配置根Logger</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger = [ level ] , appenderName1, appenderName2, …</span><br><span class="line">log4j.additivity.org.apache=false：表示Logger不会在父Logger的appender里输出，默认为true。</span><br></pre></td></tr></table></figure><ol><li>level ：设定日志记录的最低级别，可设的值有OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别，Log4j建议只使用中间四个级别。通过在这里设定级别，您可以控制应用程序中相应级别的日志信息的开关，比如在这里设定了INFO级别，则应用程序中所有DEBUG级别的日志信息将不会被打印出来。</li><li>appenderName：就是指定日志信息要输出到哪里。可以同时指定多个输出目的地，用逗号隔开。<br>例如：log4j.rootLogger＝INFO,A1,B2,C3</li></ol><h4 id="2-2、配置日志信息输出目的地（appender）"><a href="#2-2、配置日志信息输出目的地（appender）" class="headerlink" title="2.2、配置日志信息输出目的地（appender）"></a>2.2、配置日志信息输出目的地（appender）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log4j.appender.appenderName = className</span><br></pre></td></tr></table></figure><p>appenderName：自定义appderName，在log4j.rootLogger设置中使用；<br>className：可设值如下：</p><ul><li>org.apache.log4j.ConsoleAppender（控制台）</li><li>org.apache.log4j.FileAppender（文件）</li><li>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</li><li>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</li><li>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</li></ul><ol><li>ConsoleAppender选项</li></ol><ul><li>Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</li><li>ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。</li><li>Target=System.err：默认值是System.out。</li></ul><ol start="2"><li>FileAppender选项</li></ol><ul><li>Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</li><li>ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。</li><li>Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。</li><li>File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。</li></ul><ol start="3"><li>DailyRollingFileAppender选项</li></ol><ul><li>Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</li><li>ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。</li><li>Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。</li><li>File=D:/logs/logging.log4j：指定当前消息输出到logging.log4j文件中。</li><li>DatePattern=’.’yyyy-MM：每月滚动一次日志文件，即每月产生一个新的日志文件。当前月的日志文件名为logging.log4j，前一个月的日志文件名为logging.log4j.yyyy-MM。<br>另外，也可以指定按周、天、时、分等来滚动日志文件，对应的格式如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;.&apos;yyyy-MM：每月</span><br><span class="line">&apos;.&apos;yyyy-ww：每周</span><br><span class="line">&apos;.&apos;yyyy-MM-dd：每天</span><br><span class="line">&apos;.&apos;yyyy-MM-dd-a：每天两次</span><br><span class="line">&apos;.&apos;yyyy-MM-dd-HH：每小时</span><br><span class="line">&apos;.&apos;yyyy-MM-dd-HH-mm：每分钟</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>RollingFileAppender选项</li></ol><ul><li>Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</li><li>ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。</li><li>Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。</li><li>File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。</li><li>MaxFileSize=100KB：后缀可以是KB, MB 或者GB。在日志文件到达该大小时，将会自动滚动，即将原来的内容移到logging.log4j.1文件中。</li><li>MaxBackupIndex=2：指定可以产生的滚动文件的最大数，例如，设为2则可以产生logging.log4j.1，logging.log4j.2两个滚动文件和一个logging.log4j文件。</li></ul><h4 id="2-3、配置日志信息的输出格式（Layout）"><a href="#2-3、配置日志信息的输出格式（Layout）" class="headerlink" title="2.3、配置日志信息的输出格式（Layout）"></a>2.3、配置日志信息的输出格式（Layout）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log4j.appender.appenderName.layout=className</span><br></pre></td></tr></table></figure><p>className：可设值如下：</p><ul><li>org.apache.log4j.HTMLLayout（以HTML表格形式布局）</li><li>org.apache.log4j.PatternLayout（可以灵活地指定布局模式）</li><li>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</li><li>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</li></ul><ol><li>HTMLLayout选项</li></ol><ul><li>LocationInfo=true：输出java文件名称和行号，默认值是false。</li><li>Title=My Logging： 默认值是Log4J Log Messages。</li></ul><ol start="2"><li>PatternLayout选项：<br>ConversionPattern=%m%n：设定以怎样的格式显示消息。  </li></ol><p>格式化符号说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。</span><br><span class="line">%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d&#123;yyyy/MM/dd HH:mm:ss,SSS&#125;。</span><br><span class="line">%r：输出自应用程序启动到输出该log信息耗费的毫秒数。</span><br><span class="line">%t：输出产生该日志事件的线程名。</span><br><span class="line">%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。</span><br><span class="line">%c：输出日志信息所属的类目，通常就是所在类的全名。</span><br><span class="line">%M：输出产生日志信息的方法名。</span><br><span class="line">%F：输出日志消息产生时所在的文件名称。</span><br><span class="line">%L:：输出代码中的行号。</span><br><span class="line">%m:：输出代码中指定的具体日志信息。</span><br><span class="line">%n：输出一个回车换行符，Windows平台为&quot;\r\n&quot;，Unix平台为&quot;\n&quot;。</span><br><span class="line">%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。</span><br><span class="line">%%：输出一个&quot;%&quot;字符。</span><br></pre></td></tr></table></figure></p><p>另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：</p><ul><li>指定输出category的名称，最小的长度是20，如果category的名称长度小于20的话，默认的情况下右对齐。</li><li>%-20c：”-“号表示左对齐。</li><li>%.30c：指定输出category的名称，最大的长度是30，如果category的名称长度大于30的话，就会将左边多出的字符截掉，但小于30的话也不会补空格。</li></ul><h2 id="附：Log4j比较全面的配置"><a href="#附：Log4j比较全面的配置" class="headerlink" title="附：Log4j比较全面的配置"></a>附：Log4j比较全面的配置</h2><p>Log4j配置文件实现了输出到控制台、文件、回滚文件、发送日志邮件、输出到数据库日志表、自定义标签等全套功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG,console,dailyFile,im</span><br><span class="line">log4j.additivity.org.apache=true</span><br><span class="line"># 控制台(console)</span><br><span class="line">log4j.appender.console=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Threshold=DEBUG</span><br><span class="line">log4j.appender.console.ImmediateFlush=true</span><br><span class="line">log4j.appender.console.Target=System.err</span><br><span class="line">log4j.appender.console.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># 日志文件(logFile)</span><br><span class="line">log4j.appender.logFile=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.logFile.Threshold=DEBUG</span><br><span class="line">log4j.appender.logFile.ImmediateFlush=true</span><br><span class="line">log4j.appender.logFile.Append=true</span><br><span class="line">log4j.appender.logFile.File=D:/logs/log.log4j</span><br><span class="line">log4j.appender.logFile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.logFile.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># 回滚文件(rollingFile)</span><br><span class="line">log4j.appender.rollingFile=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.rollingFile.Threshold=DEBUG</span><br><span class="line">log4j.appender.rollingFile.ImmediateFlush=true</span><br><span class="line">log4j.appender.rollingFile.Append=true</span><br><span class="line">log4j.appender.rollingFile.File=D:/logs/log.log4j</span><br><span class="line">log4j.appender.rollingFile.MaxFileSize=200KB</span><br><span class="line">log4j.appender.rollingFile.MaxBackupIndex=50</span><br><span class="line">log4j.appender.rollingFile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.rollingFile.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># 定期回滚日志文件(dailyFile)</span><br><span class="line">log4j.appender.dailyFile=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.dailyFile.Threshold=DEBUG</span><br><span class="line">log4j.appender.dailyFile.ImmediateFlush=true</span><br><span class="line">log4j.appender.dailyFile.Append=true</span><br><span class="line">log4j.appender.dailyFile.File=D:/logs/log.log4j</span><br><span class="line">log4j.appender.dailyFile.DatePattern=&apos;.&apos;yyyy-MM-dd</span><br><span class="line">log4j.appender.dailyFile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.dailyFile.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># 应用于socket</span><br><span class="line">log4j.appender.socket=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.socket.RemoteHost=localhost</span><br><span class="line">log4j.appender.socket.Port=5001</span><br><span class="line">log4j.appender.socket.LocationInfo=true</span><br><span class="line"># Set up for Log Factor 5</span><br><span class="line">log4j.appender.socket.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.socket.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># Log Factor 5 Appender</span><br><span class="line">log4j.appender.LF5_APPENDER=org.apache.log4j.lf5.LF5Appender</span><br><span class="line">log4j.appender.LF5_APPENDER.MaxNumberOfRecords=2000</span><br><span class="line"># 发送日志到指定邮件</span><br><span class="line">log4j.appender.mail=org.apache.log4j.net.SMTPAppender</span><br><span class="line">log4j.appender.mail.Threshold=FATAL</span><br><span class="line">log4j.appender.mail.BufferSize=10</span><br><span class="line">log4j.appender.mail.From = xxx@mail.com</span><br><span class="line">log4j.appender.mail.SMTPHost=mail.com</span><br><span class="line">log4j.appender.mail.Subject=Log4J Message</span><br><span class="line">log4j.appender.mail.To= xxx@mail.com</span><br><span class="line">log4j.appender.mail.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.mail.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># 应用于数据库</span><br><span class="line">log4j.appender.database=org.apache.log4j.jdbc.JDBCAppender</span><br><span class="line">log4j.appender.database.URL=jdbc:mysql://localhost:3306/test</span><br><span class="line">log4j.appender.database.driver=com.mysql.jdbc.Driver</span><br><span class="line">log4j.appender.database.user=root</span><br><span class="line">log4j.appender.database.password=</span><br><span class="line">log4j.appender.database.sql=INSERT INTO LOG4J (Message) VALUES(&apos;=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n&apos;)</span><br><span class="line">log4j.appender.database.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.database.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"></span><br><span class="line"># 自定义Appender</span><br><span class="line">log4j.appender.im = net.cybercorlin.util.logger.appender.IMAppender</span><br><span class="line">log4j.appender.im.host = mail.cybercorlin.net</span><br><span class="line">log4j.appender.im.username = username</span><br><span class="line">log4j.appender.im.password = password</span><br><span class="line">log4j.appender.im.recipient = corlin@cybercorlin.net</span><br><span class="line">log4j.appender.im.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.im.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br></pre></td></tr></table></figure><h2 id="附-输出独立日志文件"><a href="#附-输出独立日志文件" class="headerlink" title="附: 输出独立日志文件"></a>附: 输出独立日志文件</h2><p>log4j的强大功能无可置疑，但实际应用中免不了遇到某个功能需要输出独立的日志文件的情况，怎样才能把所需的内容从原有日志中分离，形成单独的日志文件呢？其实只要在现有的log4j基础上稍加配置即可轻松实现这一功能。  </p><h4 id="常见"><a href="#常见" class="headerlink" title="常见"></a>常见</h4><p>先看一个常见的log4j.properties文件，它是在控制台和myweb.log文件中记录日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG, stdout, logfile</span><br><span class="line"> </span><br><span class="line">log4j.category.org.springframework=ERROR</span><br><span class="line">log4j.category.org.apache=INFO</span><br><span class="line"> </span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n</span><br><span class="line"> </span><br><span class="line">log4j.appender.logfile=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.logfile.File=$&#123;myweb.root&#125;/WEB-INF/log/myweb.log</span><br><span class="line">log4j.appender.logfile.MaxFileSize=512KB</span><br><span class="line">log4j.appender.logfile.MaxBackupIndex=5</span><br><span class="line">log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n</span><br></pre></td></tr></table></figure></p><h4 id="不同类输出不同文件"><a href="#不同类输出不同文件" class="headerlink" title="不同类输出不同文件"></a>不同类输出不同文件</h4><p>如果想对不同的类输出不同的文件(以cn.com.Test为例)，先要在Test.java中定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private static Log logger = LogFactory.getLog(Test.class);</span><br><span class="line">　　然后在log4j.properties中加入:</span><br><span class="line">log4j.logger.cn.com.Test= DEBUG, test</span><br><span class="line">log4j.appender.test=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.test.File=$&#123;myweb.root&#125;/WEB-INF/log/test.log</span><br><span class="line">log4j.appender.test.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.test.layout.ConversionPattern=%d %p [%c] - %m%n</span><br><span class="line">　　也就是让cn.com.Test中的logger使用log4j.appender.test所做的配置。</span><br></pre></td></tr></table></figure><h4 id="同一类输出多个日志文件"><a href="#同一类输出多个日志文件" class="headerlink" title="同一类输出多个日志文件"></a>同一类输出多个日志文件</h4><p>但是，如果在同一类中需要输出多个日志文件呢？其实道理是一样的，先在Test.java中定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private static Log logger1 = LogFactory.getLog(&quot;myTest1&quot;);</span><br><span class="line">private static Log logger2 = LogFactory.getLog(&quot;myTest2&quot;);</span><br></pre></td></tr></table></figure><p>然后在log4j.properties中加入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">log4j.logger.myTest1= DEBUG, test1</span><br><span class="line">log4j.appender.test1=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.test1.File=$&#123;myweb.root&#125;/WEB-INF/log/test1.log</span><br><span class="line">log4j.appender.test1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.test1.layout.ConversionPattern=%d %p [%c] - %m%n</span><br><span class="line">　</span><br><span class="line">log4j.logger.myTest2= DEBUG, test2</span><br><span class="line">log4j.appender.test2=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.test2.File=$&#123;myweb.root&#125;/WEB-INF/log/test2.log</span><br><span class="line">log4j.appender.test2.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.test2.layout.ConversionPattern=%d %p [%c] - %m%n</span><br></pre></td></tr></table></figure><p>也就是在用logger时给它一个自定义的名字(如这里的”myTest1”)，然后在log4j.properties中做出相应配置即可。别忘了不同日志要使用不同的logger<br>如输出到test1.log的要用logger1.info(“abc”)。</p><p>还有一个问题，就是这些自定义的<strong>日志默认是同时输出到log4j.rootLogger所配置的日志中的</strong>，如何能只让它们输出到自己指定的日志中呢？别急，这里有个开关：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log4j.additivity.myTest1 = false</span><br></pre></td></tr></table></figure><p>它用来设置是否同时输出到log4j.rootLogger所配置的日志中，设为false就不会输出到其它地方啦！注意这里的”myTest1”是你在程序中给logger起的那个自定义的名字！<br>如果你说，我只是不想同时输出这个日志到log4j.rootLogger所配置的logfile中，stdout里我还想同时输出呢！那也好办，把你的log4j.logger.myTest1 = DEBUG, test1改为下式就OK啦！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log4j.logger.myTest1=DEBUG, test1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、简介&quot;&gt;&lt;a href=&quot;#1、简介&quot; class=&quot;headerlink&quot; title=&quot;1、简介&quot;&gt;&lt;/a&gt;1、简介&lt;/h2&gt;&lt;p&gt;Log4j有三个主要的组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loggers(记录器):日志类别和级别;&lt;/li&gt;
&lt;li&gt;App
      
    
    </summary>
    
    
      <category term="转载" scheme="http://zzkenyon.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
</feed>
